// Package rand implements pseudo-random number generators.
//
// The API is inspired from https://pkg.go.dev/math/rand/v2
package rand

import "math"

// New returns random values by transforming random values generated by src.
func New(src Philox) Rand {
	return Rand{src: src}
}

// NewSource returns a new source for a random generator using a seed.
func NewSource(seed int64) Philox {
	seq := newBootstrapGenerator(seed)
	return NewPhilox([3]uint64{
		seq.next(),
		seq.next(),
		seq.next(),
	})
}

// Rand is a source of random number.
type Rand struct {
	src Philox
}

// Bool returns pseudo-random boolean values as an array of bool.
func (rnd Rand) Bool(dims []intlen) (Rand, [...]bool) {
	src, vals := rnd.src.Uint32(dims)
	return Rand{src: src}, [...]bool(vals > (math.MaxUint32 / 2))
}

// Uint32 returns pseudo-random 32-bit values as an array of uint32.
func (rnd Rand) Uint32(dims []intlen) (Rand, [...]uint32) {
	src, vals := rnd.src.Uint32(dims)
	return Rand{src: src}, vals
}

// Uint64 returns pseudo-random 64-bit values as an array of uint64.
func (rnd Rand) Uint64(dims []intlen) (Rand, [...]uint64) {
	src, vals := rnd.src.Uint64(dims)
	return Rand{src: src}, vals
}

// Int32 returns pseudo-random 32-bit values as an array of int32.
func (rnd Rand) Int32(dims []intlen) (Rand, [...]int32) {
	src, vals := rnd.src.Uint64(dims)
	return Rand{src: src}, [...]int32(vals)
}

// Int64 returns pseudo-random 64-bit values as an array of int64.
func (rnd Rand) Int64(dims []intlen) (Rand, [...]int64) {
	src, vals := rnd.src.Uint64(dims)
	return Rand{src: src}, [...]int64(vals)
}

// Float64 returns pseudo-random values as an array of float64
// uniformly distributed from [0.0, 1.0) (1.0 being excluded).
func (rnd Rand) Float64(dims []intlen) (Rand, [...]float64) {
	rnd, vals := rnd.Uint64(dims)
	valsF64 := [...]float64(vals) / rescaleRandFloat64
	valsF64 = math.Min(valsF64, maxFloat64BelowOne)
	return rnd, valsF64
}

// Float32 returns pseudo-random values as an array of float32
// uniformly distributed from [0.0, 1.0) (1.0 being excluded).
func (rnd Rand) Float32(dims []intlen) (Rand, [...]float32) {
	rnd, vals := rnd.Float64(dims)
	return rnd, [...]float32(vals)
}
