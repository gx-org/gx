// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package shapes_go_gx are Go bindings to the GX package:
// shapes.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package shapes_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/options"
	"github.com/gx-org/gx/api/trace"
	"github.com/gx-org/gx/api/tracer"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/pkg/errors"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
)

// PackageIR is the GX package intermediate representation
// built for a given runtime, but not yet for a specific device.
type PackageIR struct {
	Runtime *api.Runtime
	IR      *ir.Package
	Tracer  trace.Callback
}

// Load the GX package for a given backend.
func Load(rtm *api.Runtime) (*PackageIR, error) {
	bpkg, err := rtm.Builder().Build("shapes")
	if err != nil {
		return nil, err
	}
	pkg := &PackageIR{
		Runtime: rtm,
		IR:      bpkg.IR(),
	}

	return pkg, nil
}

// BuildFor loads the GX package shapes
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, options ...options.PackageOptionFactory) (*Package, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return pkg.BuildFor(dev, options...), nil
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	Package *PackageIR
	Device  *api.Device
	Factory *Factory

	options []options.PackageOption
}

// AppendOptions appends options to the compiler.
func (cmpl *Package) AppendOptions(options ...options.PackageOptionFactory) {
	plat := cmpl.Package.Runtime.Backend().Platform()
	for _, opt := range options {
		cmpl.options = append(cmpl.options, opt(plat))
	}
}

// BuildFor returns a package ready to compile for a device and options.
func (pkg *PackageIR) BuildFor(dev *api.Device, options ...options.PackageOptionFactory) *Package {
	c := &Package{
		Package: pkg,
		Device:  dev,
	}
	c.Factory = &Factory{Package: c}
	c.AppendOptions(options...)

	return c
}

// handleDType stores the backend handles of DType.
type handleDType struct {
	pkg   *Package
	struc *ir.NamedType
	owner *DType
}

// Type of the value.
func (h *handleDType) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleDType) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleDType) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleDType) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleDType) String() string {
	bld := strings.Builder{}
	bld.WriteString("DType{\n")
	bld.WriteString(h.owner.value.(fmt.Stringer).String())
	bld.WriteString("}")
	return bld.String()
}

// DType stores the handle of DType on a backend.
type DType struct {
	value  values.Array
	handle handleDType
}

var (
	_ types.Bridger = (*DType)(nil)
	_ types.Bridge  = (*handleDType)(nil)
)

func (val DType) String() string {
	return val.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (val *DType) Bridge() types.Bridge { return &val.handle }

// MarshalDType populates the receiver fields with device handles.
func (cmpl *Package) MarshalDType(val values.Value) (s *DType, err error) {
	s = cmpl.Factory.NewDType()
	if _, ok := val.(*values.Slice); ok {
		err = fmt.Errorf("cannot use handle to set DType: got a tuple instead of a single value")
		return
	}
	s.value = val.(values.Array)
	return
}

// handleShape stores the backend handles of Shape.
type handleShape struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Shape
}

// Type of the value.
func (h *handleShape) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleShape) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleShape) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleShape) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleShape) String() string {
	bld := strings.Builder{}
	bld.WriteString("Shape{\n")

	bld.WriteString(fmt.Sprintf("%s:%s\n", "DType", any(h.owner.DType).(fmt.Stringer).String()))

	bld.WriteString(fmt.Sprintf("%s:%s\n", "Dimensions", any(h.owner.Dimensions).(fmt.Stringer).String()))

	bld.WriteString("}")
	return bld.String()
}

// Shape stores the handle of Shape on a device.
type Shape struct {
	handle handleShape
	value  *values.NamedType

	DType *DType

	Dimensions *types.Slice[types.Atom[ir.Int]]
}

var (
	_ types.Bridger      = (*Shape)(nil)
	_ types.StructBridge = (*handleShape)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleShape) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalShape populates the receiver fields with device handles.
func (cmpl *Package) MarshalShape(val values.Value) (s *Shape, err error) {
	s = cmpl.Factory.NewShape()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set Shape: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type Shape: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}
	var field0 *DType
	field0, err = cmpl.MarshalDType(fields[0])
	if err != nil {
		return
	}

	field1Slice, ok := fields[1].(*values.Slice)
	if !ok {
		err = fmt.Errorf("cannot use value %T to set []<no value>: not a slice", fields[1])
		return
	}
	field1Elements := make([]types.Atom[ir.Int], field1Slice.Size())
	for i := 0; i < field1Slice.Size(); i++ {
		field1HandleI := field1Slice.Element(i)

		field1ElmtIValue, ok := field1HandleI.(values.Array)
		if !ok {
			err = errors.Errorf("cannot cast %T to %s", field1HandleI, reflect.TypeFor[*values.DeviceArray]().Name())
			return
		}
		field1ElmtI := types.NewAtom[ir.Int](field1ElmtIValue)

		field1Elements[i] = field1ElmtI
	}
	field1, err := types.NewSlice[types.Atom[ir.Int]](
		field1Slice.SliceType(),
		field1Elements,
	)
	if err != nil {
		return nil, err
	}

	s.DType = field0
	s.Dimensions = field1
	return
}

func (s Shape) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Shape) Bridge() types.Bridge { return &s.handle }

type methodBase struct {
	pkg      *Package
	function ir.Func
	runner   tracer.CompiledFunc
}

// NewDType returns a handle on named type DType.
func (fac *Factory) NewDType() *DType {
	s := &DType{}
	typ := fac.Package.Package.IR.Decls.Types[0]
	s.handle = handleDType{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	return s
}

var _ types.Bridge = (*handleDType)(nil)

func (h *handleDType) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	default:
		return nil, errors.Errorf("structure DType has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleDType) SetField(field *ir.Field, val types.Bridge) error {

	return errors.Errorf("type DType has no field")

}

// NewShape returns a handle on named type Shape.
func (fac *Factory) NewShape() *Shape {
	s := &Shape{}
	typ := fac.Package.Package.IR.Decls.Types[1]
	s.handle = handleShape{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleShape)(nil)

func (h *handleShape) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	case "DType":
		return h.pkg.Factory.NewDType().Bridge(), nil

	case "Dimensions":
		slice, err := types.NewEmptySlice[types.Atom[ir.Int]](field.Type(), nil)
		if err != nil {
			return nil, err
		}
		return slice.Bridge(), nil

	default:
		return nil, errors.Errorf("structure Shape has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleShape) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type Shape: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "DType":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*DType)
		if !ok {
			return errors.Errorf("cannot set field DType: cannot cast %T to *DType", bridger)
		}
		h.owner.DType = fieldValue
		structVal.SetField("DType", val.GXValue())
		return nil

	case "Dimensions":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*types.Slice[types.Atom[ir.Int]])
		if !ok {
			return errors.Errorf("cannot set field Dimensions: cannot cast %T to *types.Slice[types.Atom[ir.Int]]", bridger)
		}
		h.owner.Dimensions = fieldValue
		structVal.SetField("Dimensions", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Shape has no field %q", name)
	}

}
