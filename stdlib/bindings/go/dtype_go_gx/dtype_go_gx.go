// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package dtype_go_gx are Go bindings to the GX package:
// dtype.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package dtype_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/options"
	"github.com/gx-org/gx/api/trace"
	"github.com/gx-org/gx/api/tracer"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/pkg/errors"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
)

// PackageIR is the GX package intermediate representation
// built for a given runtime, but not yet for a specific device.
type PackageIR struct {
	Runtime *api.Runtime
	IR      *ir.Package
	Tracer  trace.Callback
}

// Load the GX package for a given backend.
func Load(rtm *api.Runtime) (*PackageIR, error) {
	bpkg, err := rtm.Builder().Build("dtype")
	if err != nil {
		return nil, err
	}
	pkg := &PackageIR{
		Runtime: rtm,
		IR:      bpkg.IR(),
	}

	return pkg, nil
}

// BuildFor loads the GX package dtype
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, options ...options.PackageOptionFactory) (*Package, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return pkg.BuildFor(dev, options...), nil
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	Package *PackageIR
	Device  *api.Device
	Factory *Factory

	options []options.PackageOption
}

// AppendOptions appends options to the compiler.
func (cmpl *Package) AppendOptions(options ...options.PackageOptionFactory) {
	plat := cmpl.Package.Runtime.Backend().Platform()
	for _, opt := range options {
		cmpl.options = append(cmpl.options, opt(plat))
	}
}

// BuildFor returns a package ready to compile for a device and options.
func (pkg *PackageIR) BuildFor(dev *api.Device, options ...options.PackageOptionFactory) *Package {
	c := &Package{
		Package: pkg,
		Device:  dev,
	}
	c.Factory = &Factory{Package: c}
	c.AppendOptions(options...)

	return c
}

// handleFloats stores the backend handles of Floats.
type handleFloats struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Floats
}

// Type of the value.
func (h *handleFloats) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleFloats) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleFloats) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleFloats) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleFloats) String() string {
	bld := strings.Builder{}
	bld.WriteString("Floats{\n")
	bld.WriteString(h.owner.value.(fmt.Stringer).String())
	bld.WriteString("}")
	return bld.String()
}

// Floats stores the handle of Floats on a backend.
type Floats struct {
	value  values.Array
	handle handleFloats
}

var (
	_ types.Bridger = (*Floats)(nil)
	_ types.Bridge  = (*handleFloats)(nil)
)

func (val Floats) String() string {
	return val.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (val *Floats) Bridge() types.Bridge { return &val.handle }

// MarshalFloats populates the receiver fields with device handles.
func (cmpl *Package) MarshalFloats(val values.Value) (s *Floats, err error) {
	s = cmpl.Factory.NewFloats()
	if _, ok := val.(*values.Slice); ok {
		err = fmt.Errorf("cannot use handle to set Floats: got a tuple instead of a single value")
		return
	}
	s.value = val.(values.Array)
	return
}

// handleInts stores the backend handles of Ints.
type handleInts struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Ints
}

// Type of the value.
func (h *handleInts) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleInts) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleInts) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleInts) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleInts) String() string {
	bld := strings.Builder{}
	bld.WriteString("Ints{\n")
	bld.WriteString(h.owner.value.(fmt.Stringer).String())
	bld.WriteString("}")
	return bld.String()
}

// Ints stores the handle of Ints on a backend.
type Ints struct {
	value  values.Array
	handle handleInts
}

var (
	_ types.Bridger = (*Ints)(nil)
	_ types.Bridge  = (*handleInts)(nil)
)

func (val Ints) String() string {
	return val.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (val *Ints) Bridge() types.Bridge { return &val.handle }

// MarshalInts populates the receiver fields with device handles.
func (cmpl *Package) MarshalInts(val values.Value) (s *Ints, err error) {
	s = cmpl.Factory.NewInts()
	if _, ok := val.(*values.Slice); ok {
		err = fmt.Errorf("cannot use handle to set Ints: got a tuple instead of a single value")
		return
	}
	s.value = val.(values.Array)
	return
}

// handleNum stores the backend handles of Num.
type handleNum struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Num
}

// Type of the value.
func (h *handleNum) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleNum) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleNum) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleNum) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleNum) String() string {
	bld := strings.Builder{}
	bld.WriteString("Num{\n")
	bld.WriteString(h.owner.value.(fmt.Stringer).String())
	bld.WriteString("}")
	return bld.String()
}

// Num stores the handle of Num on a backend.
type Num struct {
	value  values.Array
	handle handleNum
}

var (
	_ types.Bridger = (*Num)(nil)
	_ types.Bridge  = (*handleNum)(nil)
)

func (val Num) String() string {
	return val.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (val *Num) Bridge() types.Bridge { return &val.handle }

// MarshalNum populates the receiver fields with device handles.
func (cmpl *Package) MarshalNum(val values.Value) (s *Num, err error) {
	s = cmpl.Factory.NewNum()
	if _, ok := val.(*values.Slice); ok {
		err = fmt.Errorf("cannot use handle to set Num: got a tuple instead of a single value")
		return
	}
	s.value = val.(values.Array)
	return
}

type methodBase struct {
	pkg      *Package
	function ir.Func
	runner   tracer.CompiledFunc
}

// NewFloats returns a handle on named type Floats.
func (fac *Factory) NewFloats() *Floats {
	s := &Floats{}
	typ := fac.Package.Package.IR.Decls.TypeByName("Floats")
	s.handle = handleFloats{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	return s
}

var _ types.Bridge = (*handleFloats)(nil)

func (h *handleFloats) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	default:
		return nil, errors.Errorf("structure Floats has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleFloats) SetField(field *ir.Field, val types.Bridge) error {

	return errors.Errorf("type Floats has no field")

}

// NewInts returns a handle on named type Ints.
func (fac *Factory) NewInts() *Ints {
	s := &Ints{}
	typ := fac.Package.Package.IR.Decls.TypeByName("Ints")
	s.handle = handleInts{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	return s
}

var _ types.Bridge = (*handleInts)(nil)

func (h *handleInts) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	default:
		return nil, errors.Errorf("structure Ints has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleInts) SetField(field *ir.Field, val types.Bridge) error {

	return errors.Errorf("type Ints has no field")

}

// NewNum returns a handle on named type Num.
func (fac *Factory) NewNum() *Num {
	s := &Num{}
	typ := fac.Package.Package.IR.Decls.TypeByName("Num")
	s.handle = handleNum{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	return s
}

var _ types.Bridge = (*handleNum)(nil)

func (h *handleNum) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	default:
		return nil, errors.Errorf("structure Num has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleNum) SetField(field *ir.Field, val types.Bridge) error {

	return errors.Errorf("type Num has no field")

}
