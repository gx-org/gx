// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package rand_go_gx are Go bindings to the GX package:
// rand.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package rand_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/gx-org/gx/interp"
	"github.com/gx-org/gx/interp/state"
	"github.com/pkg/errors"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
)

// PackageIR is the GX package intermediate representation
// built for a given runtime, but not yet for a specific device.
type PackageIR struct {
	Runtime *api.Runtime
	IR      *ir.Package
	Tracer  state.Tracer
}

// Load the GX package for a given backend.
func Load(rtm *api.Runtime) (*PackageIR, error) {
	bpkg, err := rtm.Builder().Build("rand")
	if err != nil {
		return nil, err
	}
	pkg := &PackageIR{
		Runtime: rtm,
		IR:      bpkg.IR(),
	}

	return pkg, nil
}

// BuildFor loads the GX package rand
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, options ...interp.PackageOptionFactory) (*Package, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return pkg.BuildFor(dev, options...), nil
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	Package *PackageIR
	Device  *api.Device
	Factory *Factory

	options []interp.PackageOption

	New               New
	NewPhilox         NewPhilox
	NewSource         NewSource
	methodRandBool    methodBase
	methodRandFloat32 methodBase
	methodRandFloat64 methodBase
	methodRandInt32   methodBase
	methodRandInt64   methodBase
	methodRandUint32  methodBase
	methodRandUint64  methodBase
}

// AppendOptions appends options to the compiler.
func (cmpl *Package) AppendOptions(options ...interp.PackageOptionFactory) {
	plat := cmpl.Package.Runtime.Backend().Platform()
	for _, opt := range options {
		cmpl.options = append(cmpl.options, opt(plat))
	}
}

// BuildFor returns a package ready to compile for a device and options.
func (pkg *PackageIR) BuildFor(dev *api.Device, options ...interp.PackageOptionFactory) *Package {
	c := &Package{
		Package: pkg,
		Device:  dev,
	}
	c.Factory = &Factory{Package: c}
	c.AppendOptions(options...)

	c.New = New{
		methodBase: methodBase{
			pkg:      c,
			function: c.Package.IR.Funcs[0].(*ir.FuncDecl),
		},
	}
	c.NewPhilox = NewPhilox{
		methodBase: methodBase{
			pkg:      c,
			function: c.Package.IR.Funcs[1].(*ir.FuncDecl),
		},
	}
	c.NewSource = NewSource{
		methodBase: methodBase{
			pkg:      c,
			function: c.Package.IR.Funcs[2].(*ir.FuncDecl),
		},
	}

	c.methodRandBool = methodBase{
		pkg:      c,
		function: c.Package.IR.Types[1].Methods[0],
	}
	c.methodRandFloat32 = methodBase{
		pkg:      c,
		function: c.Package.IR.Types[1].Methods[1],
	}
	c.methodRandFloat64 = methodBase{
		pkg:      c,
		function: c.Package.IR.Types[1].Methods[2],
	}
	c.methodRandInt32 = methodBase{
		pkg:      c,
		function: c.Package.IR.Types[1].Methods[3],
	}
	c.methodRandInt64 = methodBase{
		pkg:      c,
		function: c.Package.IR.Types[1].Methods[4],
	}
	c.methodRandUint32 = methodBase{
		pkg:      c,
		function: c.Package.IR.Types[1].Methods[5],
	}
	c.methodRandUint64 = methodBase{
		pkg:      c,
		function: c.Package.IR.Types[1].Methods[6],
	}

	return c
}

// handlePhilox stores the backend handles of Philox.
type handlePhilox struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Philox
}

// Type of the value.
func (h *handlePhilox) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handlePhilox) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handlePhilox) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handlePhilox) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handlePhilox) String() string {
	bld := strings.Builder{}
	bld.WriteString("Philox{\n")

	bld.WriteString(fmt.Sprintf("%s:%s\n", "state", any(h.owner.state).(fmt.Stringer).String()))

	bld.WriteString("}")
	return bld.String()
}

// Philox stores the handle of Philox on a device.
type Philox struct {
	handle handlePhilox
	value  *values.Struct

	state types.Array[uint64]
}

var (
	_ types.Bridger      = (*Philox)(nil)
	_ types.StructBridge = (*handlePhilox)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handlePhilox) StructValue() *values.Struct {
	return h.owner.value
}

// MarshalPhilox populates the receiver fields with device handles.
func (cmpl *Package) MarshalPhilox(val values.Value) (s *Philox, err error) {
	s = cmpl.Factory.NewPhilox()
	var ok bool
	s.value, ok = val.(*values.Struct)
	if !ok {
		err = fmt.Errorf("cannot use handle to set Philox: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, s.value.StructType().NumFields())
	for i, field := range s.value.StructType().Fields.Fields() {
		fields[i] = s.value.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewArray[uint64](field0Value)

	s.state = field0
	return
}

func (s Philox) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Philox) Bridge() types.Bridge { return &s.handle }

// handleRand stores the backend handles of Rand.
type handleRand struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Rand

	runnerBool *MethodRandBool

	runnerFloat32 *MethodRandFloat32

	runnerFloat64 *MethodRandFloat64

	runnerInt32 *MethodRandInt32

	runnerInt64 *MethodRandInt64

	runnerUint32 *MethodRandUint32

	runnerUint64 *MethodRandUint64
}

// MethodRandBool compiles and runs the GX function Bool for a device.
// Bool returns pseudo-random boolean values as an array of bool.
type MethodRandBool struct {
	methodBase
	receiver handleRand
}

// MethodRandFloat32 compiles and runs the GX function Float32 for a device.
// Float32 returns pseudo-random values as an array of float32
// uniformly distributed from [0.0, 1.0) (1.0 being excluded).
type MethodRandFloat32 struct {
	methodBase
	receiver handleRand
}

// MethodRandFloat64 compiles and runs the GX function Float64 for a device.
// Float64 returns pseudo-random values as an array of float64
// uniformly distributed from [0.0, 1.0) (1.0 being excluded).
type MethodRandFloat64 struct {
	methodBase
	receiver handleRand
}

// MethodRandInt32 compiles and runs the GX function Int32 for a device.
// Int32 returns pseudo-random 32-bit values as an array of int32.
type MethodRandInt32 struct {
	methodBase
	receiver handleRand
}

// MethodRandInt64 compiles and runs the GX function Int64 for a device.
// Int64 returns pseudo-random 64-bit values as an array of int64.
type MethodRandInt64 struct {
	methodBase
	receiver handleRand
}

// MethodRandUint32 compiles and runs the GX function Uint32 for a device.
// Uint32 returns pseudo-random 32-bit values as an array of uint32.
type MethodRandUint32 struct {
	methodBase
	receiver handleRand
}

// MethodRandUint64 compiles and runs the GX function Uint64 for a device.
// Uint64 returns pseudo-random 64-bit values as an array of uint64.
type MethodRandUint64 struct {
	methodBase
	receiver handleRand
}

// Run first compiles Bool for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *MethodRandBool) Run(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[bool], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	if f.runner == nil {
		f.runner, err = interp.Compile(f.pkg.Device, f.function.(*ir.FuncDecl), f.receiver.GXValue(), args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(f.receiver.GXValue(), args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.pkg
	var out0 *Rand
	out0, err = cmpl.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[bool](out1Value)

	return out0, out1, nil
}

// Run first compiles Float32 for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *MethodRandFloat32) Run(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[float32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	if f.runner == nil {
		f.runner, err = interp.Compile(f.pkg.Device, f.function.(*ir.FuncDecl), f.receiver.GXValue(), args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(f.receiver.GXValue(), args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.pkg
	var out0 *Rand
	out0, err = cmpl.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float32](out1Value)

	return out0, out1, nil
}

// Run first compiles Float64 for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *MethodRandFloat64) Run(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[float64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	if f.runner == nil {
		f.runner, err = interp.Compile(f.pkg.Device, f.function.(*ir.FuncDecl), f.receiver.GXValue(), args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(f.receiver.GXValue(), args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.pkg
	var out0 *Rand
	out0, err = cmpl.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float64](out1Value)

	return out0, out1, nil
}

// Run first compiles Int32 for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *MethodRandInt32) Run(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[int32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	if f.runner == nil {
		f.runner, err = interp.Compile(f.pkg.Device, f.function.(*ir.FuncDecl), f.receiver.GXValue(), args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(f.receiver.GXValue(), args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.pkg
	var out0 *Rand
	out0, err = cmpl.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[int32](out1Value)

	return out0, out1, nil
}

// Run first compiles Int64 for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *MethodRandInt64) Run(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	if f.runner == nil {
		f.runner, err = interp.Compile(f.pkg.Device, f.function.(*ir.FuncDecl), f.receiver.GXValue(), args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(f.receiver.GXValue(), args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.pkg
	var out0 *Rand
	out0, err = cmpl.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[int64](out1Value)

	return out0, out1, nil
}

// Run first compiles Uint32 for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *MethodRandUint32) Run(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[uint32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	if f.runner == nil {
		f.runner, err = interp.Compile(f.pkg.Device, f.function.(*ir.FuncDecl), f.receiver.GXValue(), args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(f.receiver.GXValue(), args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.pkg
	var out0 *Rand
	out0, err = cmpl.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[uint32](out1Value)

	return out0, out1, nil
}

// Run first compiles Uint64 for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *MethodRandUint64) Run(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[uint64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	if f.runner == nil {
		f.runner, err = interp.Compile(f.pkg.Device, f.function.(*ir.FuncDecl), f.receiver.GXValue(), args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(f.receiver.GXValue(), args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.pkg
	var out0 *Rand
	out0, err = cmpl.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[uint64](out1Value)

	return out0, out1, nil
}

// Type of the value.
func (h *handleRand) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleRand) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleRand) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleRand) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleRand) String() string {
	bld := strings.Builder{}
	bld.WriteString("Rand{\n")

	bld.WriteString(fmt.Sprintf("%s:%s\n", "src", any(h.owner.src).(fmt.Stringer).String()))

	bld.WriteString("}")
	return bld.String()
}

// Rand stores the handle of Rand on a device.
type Rand struct {
	handle handleRand
	value  *values.Struct

	src *Philox
}

var (
	_ types.Bridger      = (*Rand)(nil)
	_ types.StructBridge = (*handleRand)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleRand) StructValue() *values.Struct {
	return h.owner.value
}

// MarshalRand populates the receiver fields with device handles.
func (cmpl *Package) MarshalRand(val values.Value) (s *Rand, err error) {
	s = cmpl.Factory.NewRand()
	var ok bool
	s.value, ok = val.(*values.Struct)
	if !ok {
		err = fmt.Errorf("cannot use handle to set Rand: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, s.value.StructType().NumFields())
	for i, field := range s.value.StructType().Fields.Fields() {
		fields[i] = s.value.FieldValue(field.Name.Name)
	}
	var field0 *Philox
	field0, err = cmpl.MarshalPhilox(fields[0])
	if err != nil {
		return
	}
	s.src = field0
	return
}

func (s Rand) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Rand) Bridge() types.Bridge { return &s.handle }

// Bool returns a handle to compile method Bool for a device.
func (s Rand) Bool() *MethodRandBool {
	return s.handle.runnerBool
}

// Float32 returns a handle to compile method Float32 for a device.
func (s Rand) Float32() *MethodRandFloat32 {
	return s.handle.runnerFloat32
}

// Float64 returns a handle to compile method Float64 for a device.
func (s Rand) Float64() *MethodRandFloat64 {
	return s.handle.runnerFloat64
}

// Int32 returns a handle to compile method Int32 for a device.
func (s Rand) Int32() *MethodRandInt32 {
	return s.handle.runnerInt32
}

// Int64 returns a handle to compile method Int64 for a device.
func (s Rand) Int64() *MethodRandInt64 {
	return s.handle.runnerInt64
}

// Uint32 returns a handle to compile method Uint32 for a device.
func (s Rand) Uint32() *MethodRandUint32 {
	return s.handle.runnerUint32
}

// Uint64 returns a handle to compile method Uint64 for a device.
func (s Rand) Uint64() *MethodRandUint64 {
	return s.handle.runnerUint64
}

type methodBase struct {
	pkg      *Package
	function ir.Func
	runner   *state.CompiledGraph
}

// New compiles and runs the GX function New for a device.
// New returns random values by transforming random values generated by src.
type New struct {
	methodBase
}

// NewPhilox compiles and runs the GX function NewPhilox for a device.
// NewPhilox returns a new Philox source seeded with the given values.
type NewPhilox struct {
	methodBase
}

// NewSource compiles and runs the GX function NewSource for a device.
// NewSource returns a new source for a random generator using a seed.
type NewSource struct {
	methodBase
}

// Run first compiles New for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *New) Run(arg0 *Philox) (_ *Rand, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // src rand.Philox
	}
	if f.runner == nil {
		f.runner, err = interp.Compile(f.pkg.Device, f.function.(*ir.FuncDecl), nil, args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.pkg
	var out0 *Rand
	out0, err = cmpl.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// Run first compiles NewPhilox for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *NewPhilox) Run(arg0 types.Array[uint64]) (_ *Philox, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // seed [3]uint64
	}
	if f.runner == nil {
		f.runner, err = interp.Compile(f.pkg.Device, f.function.(*ir.FuncDecl), nil, args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.pkg
	var out0 *Philox
	out0, err = cmpl.MarshalPhilox(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// Run first compiles NewSource for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *NewSource) Run(arg0 types.Atom[int64]) (_ *Philox, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // seed int64
	}
	if f.runner == nil {
		f.runner, err = interp.Compile(f.pkg.Device, f.function.(*ir.FuncDecl), nil, args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.pkg
	var out0 *Philox
	out0, err = cmpl.MarshalPhilox(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// NewPhilox returns a handle on named type Philox.
func (fac *Factory) NewPhilox() *Philox {
	s := &Philox{}
	typ := fac.Package.Package.IR.Types[0]
	s.handle = handlePhilox{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	var err error
	s.value, err = values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}

	return s
}

var _ types.Bridge = (*handlePhilox)(nil)

func (h *handlePhilox) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	case "state":
		return nil, errors.Errorf("cannot create a new instance for field state: type types.Array[uint64] not supported")

	default:
		return nil, errors.Errorf("structure Philox has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handlePhilox) SetField(field *ir.Field, val types.Bridge) error {
	name := field.Name.Name
	switch name {

	case "state":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[uint64])
		if !ok {
			return errors.Errorf("cannot set field state: cannot cast %T to types.Array[uint64]", bridger)
		}
		h.owner.state = fieldValue
		h.owner.value.SetField("state", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Philox has no field %q", name)
	}
}

// NewRand returns a handle on named type Rand.
func (fac *Factory) NewRand() *Rand {
	s := &Rand{}
	typ := fac.Package.Package.IR.Types[1]
	s.handle = handleRand{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	var err error
	s.value, err = values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}

	s.handle.runnerBool = &MethodRandBool{
		methodBase: s.handle.pkg.methodRandBool,
		receiver:   s.handle,
	}

	s.handle.runnerFloat32 = &MethodRandFloat32{
		methodBase: s.handle.pkg.methodRandFloat32,
		receiver:   s.handle,
	}

	s.handle.runnerFloat64 = &MethodRandFloat64{
		methodBase: s.handle.pkg.methodRandFloat64,
		receiver:   s.handle,
	}

	s.handle.runnerInt32 = &MethodRandInt32{
		methodBase: s.handle.pkg.methodRandInt32,
		receiver:   s.handle,
	}

	s.handle.runnerInt64 = &MethodRandInt64{
		methodBase: s.handle.pkg.methodRandInt64,
		receiver:   s.handle,
	}

	s.handle.runnerUint32 = &MethodRandUint32{
		methodBase: s.handle.pkg.methodRandUint32,
		receiver:   s.handle,
	}

	s.handle.runnerUint64 = &MethodRandUint64{
		methodBase: s.handle.pkg.methodRandUint64,
		receiver:   s.handle,
	}

	return s
}

var _ types.Bridge = (*handleRand)(nil)

func (h *handleRand) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	case "src":
		return h.pkg.Factory.NewPhilox().Bridge(), nil

	default:
		return nil, errors.Errorf("structure Rand has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleRand) SetField(field *ir.Field, val types.Bridge) error {
	name := field.Name.Name
	switch name {

	case "src":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*Philox)
		if !ok {
			return errors.Errorf("cannot set field src: cannot cast %T to *Philox", bridger)
		}
		h.owner.src = fieldValue
		h.owner.value.SetField("src", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Rand has no field %q", name)
	}
}
