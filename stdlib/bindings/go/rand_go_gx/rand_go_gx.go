// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package rand_go_gx are Go bindings to the GX package:
// rand.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package rand_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/options"
	"github.com/gx-org/gx/api/tracer"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/core"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/pkg/errors"

	gxdep0 "github.com/gx-org/gx/stdlib/bindings/go/dtype_go_gx"
	gxdep1 "github.com/gx-org/gx/stdlib/bindings/go/math_go_gx"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
	_ = ir.NamedType{}
	_ = tracer.Trace
)

// Load the package for a given runtime.
func Load(rtm *api.Runtime) (*core.Package, error) {
	bpkg, err := rtm.Builder().Build("rand")
	if err != nil {
		return nil, err
	}
	deps := make([]*core.Package, 2)
	deps[0], err = gxdep0.Load(rtm)
	if err != nil {
		return nil, err
	}
	deps[1], err = gxdep1.Load(rtm)
	if err != nil {
		return nil, err
	}
	return core.NewPackage(bpkg, deps), nil
}

// BuildFor loads the GX package rand
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, opts ...options.PackageOptionFactory) (*Package, error) {
	pkgHandle, err := BuildHandleFor(dev, opts...)
	if err != nil {
		return nil, err
	}
	return pkgHandle.Factory.Package, nil
}

// BuildHandleFor loads the GX package rand
// then returns that package for a given device and options.
func BuildHandleFor(dev *api.Device, opts ...options.PackageOptionFactory) (*PackageHandle, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return BuildFromIR(pkg, dev, opts)
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// PackageHandle provides utility functions for the package.
type PackageHandle struct {
	*core.PackageCompileSetup
	Factory *Factory

	// Package dependencies
	gxdep0 *gxdep0.PackageHandle
	gxdep1 *gxdep1.PackageHandle
}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	handle PackageHandle

	// Functions and methods cache
	cacheRandBool          *core.FuncCache
	cacheRandUint32        *core.FuncCache
	cacheRandUint64        *core.FuncCache
	cacheRandInt32         *core.FuncCache
	cacheRandInt64         *core.FuncCache
	cacheRandFloat64MinMax *core.FuncCache
	cacheRandFloat64       *core.FuncCache
	cacheRandFloat32MinMax *core.FuncCache
	cacheRandFloat32       *core.FuncCache
	cacheNewPhilox         *core.FuncCache
	cacheNew               *core.FuncCache
	cacheNewSource         *core.FuncCache
}

// BuildFromIR builds a package for a device once it has been loaded.
func BuildFromIR(irPkg *core.Package, dev *api.Device, optionFactories []options.PackageOptionFactory) (*PackageHandle, error) {
	pkg := &Package{}
	pkg.handle.Factory = &Factory{Package: pkg}
	pkg.handle.PackageCompileSetup = irPkg.Setup(dev, optionFactories)
	// Build dependencies.
	var err error
	pkg.handle.gxdep0, err = core.BuildDep[*gxdep0.PackageHandle](
		pkg.handle.PackageCompileSetup,
		0,
		gxdep0.BuildFromIR,
	)
	if err != nil {
		return nil, err
	}
	pkg.handle.gxdep1, err = core.BuildDep[*gxdep1.PackageHandle](
		pkg.handle.PackageCompileSetup,
		1,
		gxdep1.BuildFromIR,
	)
	if err != nil {
		return nil, err
	}

	// Initialise function and method caches.
	pkg.cacheRandBool, err = pkg.handle.NewCache("Rand", "Bool")
	if err != nil {
		return nil, err
	}
	pkg.cacheRandUint32, err = pkg.handle.NewCache("Rand", "Uint32")
	if err != nil {
		return nil, err
	}
	pkg.cacheRandUint64, err = pkg.handle.NewCache("Rand", "Uint64")
	if err != nil {
		return nil, err
	}
	pkg.cacheRandInt32, err = pkg.handle.NewCache("Rand", "Int32")
	if err != nil {
		return nil, err
	}
	pkg.cacheRandInt64, err = pkg.handle.NewCache("Rand", "Int64")
	if err != nil {
		return nil, err
	}
	pkg.cacheRandFloat64MinMax, err = pkg.handle.NewCache("Rand", "Float64MinMax")
	if err != nil {
		return nil, err
	}
	pkg.cacheRandFloat64, err = pkg.handle.NewCache("Rand", "Float64")
	if err != nil {
		return nil, err
	}
	pkg.cacheRandFloat32MinMax, err = pkg.handle.NewCache("Rand", "Float32MinMax")
	if err != nil {
		return nil, err
	}
	pkg.cacheRandFloat32, err = pkg.handle.NewCache("Rand", "Float32")
	if err != nil {
		return nil, err
	}
	pkg.cacheNewPhilox, err = pkg.handle.NewCache("", "NewPhilox")
	if err != nil {
		return nil, err
	}
	pkg.cacheNew, err = pkg.handle.NewCache("", "New")
	if err != nil {
		return nil, err
	}
	pkg.cacheNewSource, err = pkg.handle.NewCache("", "NewSource")
	if err != nil {
		return nil, err
	}

	return &pkg.handle, err
}

// NewPhilox returns a new Philox source seeded with the given values.
func (pkg *Package) NewPhilox(arg0 types.Array[uint64]) (_ *Philox, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // seed [3]uint64
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheNewPhilox.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := pkg.handle.Factory

	var out0 *Philox
	out0, err = fty.MarshalPhilox(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// New returns random values by transforming random values generated by src.
func (pkg *Package) New(arg0 *Philox) (_ *Rand, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // src rand.Philox
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheNew.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := pkg.handle.Factory

	var out0 *Rand
	out0, err = fty.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// NewSource returns a new source for a random generator using a seed.
func (pkg *Package) NewSource(arg0 types.Atom[int64]) (_ *Philox, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // seed int64
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheNewSource.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := pkg.handle.Factory

	var out0 *Philox
	out0, err = fty.MarshalPhilox(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// handlePhilox stores the backend handles of Philox.
type handlePhilox struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Philox
}

// Type of the value.
func (h *handlePhilox) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handlePhilox) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handlePhilox) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handlePhilox) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handlePhilox) String() string {
	bld := strings.Builder{}
	bld.WriteString("Philox{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "state", any(h.owner.state).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// Philox stores the handle of Philox on a device.
type Philox struct {
	handle handlePhilox
	value  *values.NamedType

	state types.Array[uint64]
}

var (
	_ types.Bridger      = (*Philox)(nil)
	_ types.StructBridge = (*handlePhilox)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handlePhilox) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalPhilox populates the receiver fields with device handles.
func (fty *Factory) MarshalPhilox(val values.Value) (s *Philox, err error) {
	s = fty.NewPhilox()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set Philox: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type Philox: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewArray[uint64](field0Value)

	s.state = field0
	return
}

func (s Philox) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Philox) Bridge() types.Bridge { return &s.handle }

// NewPhilox returns a handle on named type Philox.
func (fac *Factory) NewPhilox() *Philox {
	s := &Philox{}
	typ := fac.Package.handle.IR().Decls.TypeByName("Philox")
	s.handle = handlePhilox{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handlePhilox)(nil)

func (h *handlePhilox) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "state":
		return nil, errors.Errorf("cannot create a new instance for field state: type types.Array[uint64] not supported")

	default:
		return nil, errors.Errorf("structure Philox has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handlePhilox) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type Philox: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "state":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[uint64])
		if !ok {
			return errors.Errorf("cannot set field state: cannot cast %T to types.Array[uint64]", bridger)
		}
		h.owner.state = fieldValue
		structVal.SetField("state", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Philox has no field %q", name)
	}

}

// handlebootstrapGenerator stores the backend handles of bootstrapGenerator.
type handlebootstrapGenerator struct {
	pkg   *Package
	struc *ir.NamedType
	owner *bootstrapGenerator
}

// Type of the value.
func (h *handlebootstrapGenerator) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handlebootstrapGenerator) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handlebootstrapGenerator) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handlebootstrapGenerator) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handlebootstrapGenerator) String() string {
	bld := strings.Builder{}
	bld.WriteString("bootstrapGenerator{\n")

	bld.WriteString("}")
	return bld.String()
}

// bootstrapGenerator stores the handle of bootstrapGenerator on a device.
type bootstrapGenerator struct {
	handle handlebootstrapGenerator
	value  *values.NamedType
}

var (
	_ types.Bridger      = (*bootstrapGenerator)(nil)
	_ types.StructBridge = (*handlebootstrapGenerator)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handlebootstrapGenerator) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalbootstrapGenerator populates the receiver fields with device handles.
func (fty *Factory) MarshalbootstrapGenerator(val values.Value) (s *bootstrapGenerator, err error) {
	s = fty.NewbootstrapGenerator()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set bootstrapGenerator: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type bootstrapGenerator: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	return
}

func (s bootstrapGenerator) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *bootstrapGenerator) Bridge() types.Bridge { return &s.handle }

// NewbootstrapGenerator returns a handle on named type bootstrapGenerator.
func (fac *Factory) NewbootstrapGenerator() *bootstrapGenerator {
	s := &bootstrapGenerator{}
	typ := fac.Package.handle.IR().Decls.TypeByName("bootstrapGenerator")
	s.handle = handlebootstrapGenerator{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handlebootstrapGenerator)(nil)

func (h *handlebootstrapGenerator) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	default:
		return nil, errors.Errorf("structure bootstrapGenerator has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handlebootstrapGenerator) SetField(field *ir.Field, val types.Bridge) error {

	return errors.Errorf("type bootstrapGenerator has no field")

}

// handleRand stores the backend handles of Rand.
type handleRand struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Rand
}

// Type of the value.
func (h *handleRand) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleRand) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleRand) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleRand) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleRand) String() string {
	bld := strings.Builder{}
	bld.WriteString("Rand{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "src", any(h.owner.src).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// Rand stores the handle of Rand on a device.
type Rand struct {
	handle handleRand
	value  *values.NamedType

	src *Philox
}

var (
	_ types.Bridger      = (*Rand)(nil)
	_ types.StructBridge = (*handleRand)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleRand) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalRand populates the receiver fields with device handles.
func (fty *Factory) MarshalRand(val values.Value) (s *Rand, err error) {
	s = fty.NewRand()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set Rand: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type Rand: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}
	var field0 *Philox
	field0, err = fty.MarshalPhilox(fields[0])
	if err != nil {
		return
	}
	s.src = field0
	return
}

func (s Rand) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Rand) Bridge() types.Bridge { return &s.handle }

// NewRand returns a handle on named type Rand.
func (fac *Factory) NewRand() *Rand {
	s := &Rand{}
	typ := fac.Package.handle.IR().Decls.TypeByName("Rand")
	s.handle = handleRand{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleRand)(nil)

func (h *handleRand) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "src":
		return h.pkg.handle.Factory.NewPhilox().Bridge(), nil

	default:
		return nil, errors.Errorf("structure Rand has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleRand) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type Rand: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "src":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*Philox)
		if !ok {
			return errors.Errorf("cannot set field src: cannot cast %T to *Philox", bridger)
		}
		h.owner.src = fieldValue
		structVal.SetField("src", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Rand has no field %q", name)
	}

}

// Bool returns pseudo-random boolean values as an array of bool.
func (recv *Rand) Bool(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[bool], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheRandBool.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *Rand
	out0, err = fty.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[bool](out1Value)

	return out0, out1, nil
}

// Uint32 returns pseudo-random 32-bit values as an array of uint32.
func (recv *Rand) Uint32(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[uint32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheRandUint32.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *Rand
	out0, err = fty.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[uint32](out1Value)

	return out0, out1, nil
}

// Uint64 returns pseudo-random 64-bit values as an array of uint64.
func (recv *Rand) Uint64(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[uint64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheRandUint64.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *Rand
	out0, err = fty.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[uint64](out1Value)

	return out0, out1, nil
}

// Int32 returns pseudo-random 32-bit values as an array of int32.
func (recv *Rand) Int32(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[int32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheRandInt32.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *Rand
	out0, err = fty.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[int32](out1Value)

	return out0, out1, nil
}

// Int64 returns pseudo-random 64-bit values as an array of int64.
func (recv *Rand) Int64(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheRandInt64.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *Rand
	out0, err = fty.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[int64](out1Value)

	return out0, out1, nil
}

// Float64MinMax samples uniform pseudo-random values in [min, max).
func (recv *Rand) Float64MinMax(arg0 types.Atom[float64], arg1 types.Atom[float64], arg2 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[float64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // min float64
		arg1.Bridge().GXValue(), // max float64
		arg2.Bridge().GXValue(), // dims []intlen
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheRandFloat64MinMax.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *Rand
	out0, err = fty.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float64](out1Value)

	return out0, out1, nil
}

// Float64 returns pseudo-random values as an array of float64
// uniformly distributed from [0.0, 1.0) (1.0 being excluded).
func (recv *Rand) Float64(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[float64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheRandFloat64.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *Rand
	out0, err = fty.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float64](out1Value)

	return out0, out1, nil
}

// Float32MinMax samples uniform pseudo-random values in [min, max).
func (recv *Rand) Float32MinMax(arg0 types.Atom[float32], arg1 types.Atom[float32], arg2 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[float32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // min float32
		arg1.Bridge().GXValue(), // max float32
		arg2.Bridge().GXValue(), // dims []intlen
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheRandFloat32MinMax.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *Rand
	out0, err = fty.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float32](out1Value)

	return out0, out1, nil
}

// Float32 returns pseudo-random values as an array of float32
// uniformly distributed from [0.0, 1.0) (1.0 being excluded).
func (recv *Rand) Float32(arg0 *types.Slice[types.Atom[ir.Int]]) (_ *Rand, _ types.Array[float32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // dims []intlen
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheRandFloat32.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *Rand
	out0, err = fty.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float32](out1Value)

	return out0, out1, nil
}
