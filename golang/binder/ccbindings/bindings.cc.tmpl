// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "{{.HeaderPath}}"

#include <utility>

#include <absl/status/statusor.h>
#include <gx/golang/binder/cgx/cppgx.h>

namespace {{.Namespace}} {

// Function classes

{{range $func := .Funcs }}

{{$func.Name}}Func::{{$func.Name}}Func({{.Class}}& package): package_(package) {}

{{$func.ReturnType}} {{$func.Name}}Func::operator()({{range $param := $func.Params}}const {{$param.Type}}& {{$param.Name}}{{$param.Separator}}{{end}}) {
 const absl::StatusOr<::gxlang::cppgx::Function> fn(package_.package_.FindFunction("{{$func.Name}}"));
 if (!fn.ok()) {
  return fn.status();
 }
 // Extract values from the parameters.
 const std::vector<std::reference_wrapper<const ::gxlang::cppgx::Value>> args = {
{{- range $i, $param := .Params }}
  {{$param.Name}}.get_value(),
{{- end}}
 };
 absl::StatusOr<::gxlang::cppgx::FunctionResult> fnr(fn->Run(args));
 if (!fnr.ok()) {
  return fnr.status();
 }
 std::vector<::gxlang::cppgx::Value>& return_values(fnr->mutable_values());
{{- if $func.ReturnTuple}}
 {{$func.ReturnType}} result({
 {{- range $i, $result := .Results }}
  {{if gt $i 0}}, {{end}}std::move(return_values[{{$i}}])
 {{- end}}
});
 return result;
{{- else}}
 return std::move(return_values[0]);
{{- end}}
}

{{end}}

// Package classes

absl::StatusOr<{{.Class}}IR> {{.Class}}IR::Load(const ::gxlang::cppgx::Runtime& runtime) {
  absl::StatusOr<::gxlang::cppgx::PackageIR>
      result(runtime.Load("{{.Package.FullName}}"));
  if (!result.ok()) return result.status();
  return {{.Class}}IR(std::move(result).value());
}

{{.Class}} {{.Class}}IR::BuildFor(const ::gxlang::cppgx::Device& dev) {
  return {{.Class}}(package_ir_.BuildFor(dev));
}

absl::StatusOr<{{.Class}}> {{.Class}}::BuildFor(const ::gxlang::cppgx::Device& device) {
  auto result = {{.Class}}IR::Load(device.runtime());
  if (!result.ok()) return result.status();
  return result.value().BuildFor(device);
}

} // namespace {{.Namespace}}
