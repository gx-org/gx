// Package {{.Package.Name.Name}}_go_gx are Go bindings to the GX package:
// {{.Package.FullName}}.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package {{.Package.Name.Name}}_go_gx

import (
	"fmt"
	"strings"
	"reflect"

	"github.com/pkg/errors"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/interp"
	"github.com/gx-org/gx/interp/state"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	{{.GXImportBindedLibrary}}

	{{.GXImportDeps}}
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
)

// Package is the GX package {{.Package.FullName}} built for a backend.
type Package struct {
	Runtime *api.Runtime
	IR      *ir.Package
	Tracer  state.Tracer
{{ range $dep := .Dependencies }}
	{{$dep.ImportName}} *{{$dep.ImportName}}.Package
{{end}}
}

// Load the GX package for a given backend.
func Load(rtm *api.Runtime) (*Package, error) {
	{{.BuildIRPackage}}
	pkg := &Package{
		Runtime: rtm,
		IR: irPackage,
	}
{{ range $dep := .Dependencies }}
	if pkg.{{$dep.ImportName}}, err = {{$dep.ImportName}}.Load(rtm); err != nil {
		return nil, err
	}
{{end}}
	return pkg, nil
}

// CompilerFor loads the GX package {{.Package.FullName}}
// then returns the compiler for a given device and options.
func CompilerFor(rtm *api.Runtime, dev platform.Device, options ...interp.PackageOptionFactory) (*Compiler, error) {
	pkg, err := Load(rtm)
	if err != nil {
		return nil, err
	}
	return pkg.CompilerFor(dev, options...), nil
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Compiler *Compiler
}

// Compiler compiles GX functions for a given device.
type Compiler struct {
	Package *Package
	Device  platform.Device
	Factory *Factory

	options []interp.PackageOption
{{ range $dep := .Dependencies }}
	{{$dep.ImportName}} *{{$dep.ImportName}}.Compiler
{{end}}
{{.FuncsCompilerFields}}
{{.MethodsCompilerFields}}
}

// AppendOptions appends options to the compiler.
func (cmpl *Compiler) AppendOptions(options ...interp.PackageOptionFactory) {
	plat := cmpl.Package.Runtime.Platform()
	for _, opt := range options {
		cmpl.options = append(cmpl.options, opt(plat))
	}
}

// CompilerFor returns a compiler for a device and options.
func (pkg *Package) CompilerFor(dev platform.Device, options ...interp.PackageOptionFactory) *Compiler {
	c := &Compiler{
		Package: pkg,
		Device: dev,
	}
	c.Factory = &Factory{Compiler: c}
	c.AppendOptions(options...)

	{{.FuncsCompilerSetFields}}
	{{.MethodsCompilerSetFields}}
{{ range $dep := .Dependencies }}
	c.{{$dep.ImportName}} = c.Package.{{.ImportName}}.CompilerFor(dev, options...)
{{end}}
	return c
}

{{.PkgVars}}

{{.NamedTypeDefinitions}}

type methodBase struct {
	compiler *Compiler
	function *ir.FuncDecl
	runner   *state.CompiledGraph
}

{{.FuncRunners}}






{{range $typ := .NamedTypes}}

// New{{.Named.Name}} returns a handle on named type {{.Named.Name}}.
func (fac *Factory) New{{.Named.Name}}() *{{.Named.Name}} {
	s := &{{.Named.Name}}{}
	typ := fac.Compiler.Package.IR.Types[{{.Named.ID}}]
	s.handle = handle{{.Named.Name}}{
		compiler: fac.Compiler,
		struc:  typ,
		owner:  s,
	}
{{.InitGXValue}}
{{.Methods.InitRunners}}
	return s
}

var _ types.Bridge = (*handle{{.Named.Name}})(nil)

func (h *handle{{.Named.Name}}) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
{{range $field := .Fields}}
	case "{{$field.Name}}":
		{{$field.Constructor}}
{{end}}
	default:
		return nil, errors.Errorf("structure {{.Named.Name}} has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handle{{.Named.Name}}) SetField(field *ir.Field, val types.Bridge) error {
	name := field.Name.Name
	switch name {
{{range $field := .Fields}}
	case "{{$field.Name}}":
		bridger := val.Bridger()
		fieldValue, ok := bridger.({{$field.BridgerType}})
		if !ok {
			return errors.Errorf("cannot set field {{$field.Name}}: cannot cast %T to {{$field.BridgerType}}", bridger)
		}
		h.owner.{{$field.Name}} = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil
{{end}}
	default:
		return errors.Errorf("structure {{.Named.Name}} has no field %q", name)
	}
}

{{end}}
