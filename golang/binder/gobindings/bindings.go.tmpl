// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package {{.Package.Name.Name}}_go_gx are Go bindings to the GX package:
// {{.Package.FullName}}.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package {{.Package.Name.Name}}_go_gx

import (
	"fmt"
	"strings"
	"reflect"

	"github.com/pkg/errors"
	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/options"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/api/tracer"
	"github.com/gx-org/gx/golang/binder/gobindings/core"
	"github.com/gx-org/gx/golang/binder/gobindings/types"

	{{.GXImportBindedLibrary}}

{{ range $dep := .Dependencies -}}
	gxdep{{.Index}} "{{$dep.PackagePath}}"
{{end}}
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
	_ = ir.NamedType{}
	_ = tracer.Trace
)

// Load the package for a given runtime.
func Load(rtm *api.Runtime) (*core.Package, error) {
	bpkg, err := rtm.Builder().Build("{{.Package.FullName}}")
	if err != nil {
		return nil, err
	}
	deps := make([]*core.Package, {{.NumDeps}})
{{ range $dep := .Dependencies -}}
	deps[{{$dep.Index}}], err = {{$dep.ImportName}}.Load(rtm)
	if err != nil {
		return nil, err
	}
{{end -}}
	return core.NewPackage(bpkg, deps), nil
}

// BuildFor loads the GX package {{.Package.FullName}}
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, opts ...options.PackageOptionFactory) (*Package, error) {
	pkgHandle, err := BuildHandleFor(dev, opts...)
	if err != nil {
		return nil, err
	}
	return pkgHandle.Factory.Package, nil
}

// BuildHandleFor loads the GX package {{.Package.FullName}}
// then returns that package for a given device and options.
func BuildHandleFor(dev *api.Device, opts ...options.PackageOptionFactory) (*PackageHandle, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return BuildFromIR(pkg, dev, opts)
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// PackageHandle provides utility functions for the package.
type PackageHandle struct {
	*core.PackageCompileSetup
	Factory *Factory

	// Package dependencies
{{ range $dep := .Dependencies -}}
	{{$dep.ImportName}} *{{$dep.ImportName}}.PackageHandle
{{end}}
}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	handle PackageHandle

	// Functions and methods cache
{{ range $fn := .FunctionsAndMethods -}}
	cache{{$fn.RecvTypeName}}{{$fn.Name}} *core.FuncCache
{{end}}
}

// BuildFromIR builds a package for a device once it has been loaded.
func BuildFromIR(irPkg *core.Package, dev *api.Device, optionFactories []options.PackageOptionFactory) (*PackageHandle, error) {
	pkg := &Package{}
	pkg.handle.Factory = &Factory{Package: pkg}
	pkg.handle.PackageCompileSetup = irPkg.Setup(dev, optionFactories)
	// Build dependencies.
	var err error
{{ range $dep := .Dependencies -}}
	pkg.handle.{{$dep.ImportName}}, err = core.BuildDep[*{{$dep.ImportName}}.PackageHandle](
		pkg.handle.PackageCompileSetup,
		{{$dep.Index}},
		{{$dep.ImportName}}.BuildFromIR,
	)
	if err != nil {
		return nil, err
	}
{{end}}

	// Initialise function and method caches.
{{ range $fn := .FunctionsAndMethods -}}
	pkg.cache{{$fn.RecvTypeName}}{{$fn.Name}}, err = pkg.handle.NewCache("{{$fn.RecvTypeName}}", "{{$fn.Name}}")
	if err != nil {
		return nil, err
	}
{{end}}

	return &pkg.handle, err
}

{{.PkgVars}}

{{ range $fn := .Funcs -}}

{{with .Doc}}{{range .List -}}
{{.Text}}
{{end}}{{end -}}
func (pkg *Package) {{.Name}}({{.Parameters}}) ({{.Results}}, err error) {
	var args []values.Value = {{.BackendArguments}}
	var runner tracer.CompiledFunc
	runner, err = pkg.cache{{.Name}}.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	{{.DefinePackageVariable}}{{.ProcessDeviceOutput}}
	return {{.Returns}}, nil
}

{{end -}}

{{ range $namedType := .NamedTypes -}}

{{$namedType.BuildDeclaration}}

// New{{.Named.Name}} returns a handle on named type {{.Named.Name}}.
func (fac *Factory) New{{.Named.Name}}() *{{.Named.Name}} {
	s := &{{.Named.Name}}{}
	typ := fac.Package.handle.IR().Decls.TypeByName("{{.Named.Name}}")
	s.handle = handle{{.Named.Name}}{
		pkg: fac.Package,
		struc:  typ,
		owner:  s,
	}
{{.InitGXValue}}
	return s
}

var _ types.Bridge = (*handle{{.Named.Name}})(nil)

func (h *handle{{.Named.Name}}) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
{{range $field := .Fields -}}
	case "{{$field.Name}}":
		{{$field.Constructor}}
{{end}}
	default:
		return nil, errors.Errorf("structure {{.Named.Name}} has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handle{{.Named.Name}}) SetField(field *ir.Field, val types.Bridge) error {
{{$numFields := len .Fields}}
{{if eq $numFields 0}}
	return errors.Errorf("type {{.Named.Name}} has no field")
{{else}}
	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type {{.Named.Name}}: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {
{{range $field := .Fields}}
	case "{{$field.Name}}":
		bridger := val.Bridger()
		fieldValue, ok := bridger.({{$field.BridgerType}})
		if !ok {
			return errors.Errorf("cannot set field {{$field.Name}}: cannot cast %T to {{$field.BridgerType}}", bridger)
		}
		h.owner.{{$field.Name}} = fieldValue
		structVal.SetField("{{$field.Name}}", val.GXValue())
		return nil
{{end}}
	default:
		return errors.Errorf("structure {{.Named.Name}} has no field %q", name)
	}
{{end}}
}

{{ range $fn := .Methods -}}

{{with .Doc}}{{range .List -}}
{{.Text}}
{{end}}{{end -}}
func (recv *{{.RecvTypeName}}) {{.Name}}({{.Parameters}}) ({{.Results}}, err error) {
	var args []values.Value = {{.BackendArguments}}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cache{{.RecvTypeName}}{{.Name}}.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	{{.DefinePackageVariable}}{{.ProcessDeviceOutput}}
	return {{.Returns}}, nil
}

{{end -}}

{{end -}}
