/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package cgx */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 36 "cgx.go"



#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#include <golang/binder/cgx/cgx.h>

// cgx_device_get_result is the return value for cgx_device_get().
struct cgx_device_get_result {
	cgx_device device;
	cgx_error error;
};

// cgx_list_statics_result is the return value when listing static variables of a package.
struct cgx_list_statics_result {
	cgx_static* statics;
	int num_statics;
	cgx_error error;
};

// cgx_list_functions_result is the return value when listing functions of a GX element.
struct cgx_list_functions_result {
	cgx_function* funcs;
	int num_functions;
	cgx_error error;
};

// cgx_list_interfaces is the return value when listing interfaces (i.e. named types) of a GX element.
struct cgx_list_interfaces_result {
	cgx_interface* ifaces;
	int num_ifaces;
	cgx_error error;
};

// cgx_function_signature_element describes a function parameter or return value.
struct cgx_function_signature_element {
	const char* name;
	enum cgx_value_kind kind;
};

// cgx_function_signature_result is the return value for cgx_function_signature().
struct cgx_function_signature_result {
	struct cgx_function_signature_element* parameter;
	uint32_t parameter_size;
	struct cgx_function_signature_element* result;
	uint32_t result_size;

	cgx_error error;
};

// cgx_static_find_result is the return value for cgx_static_find().
struct cgx_static_find_result {
	cgx_static static_var;
	cgx_error error;
};

// cgx_interface_find_result is the return value for cgx_interface_find().
struct cgx_interface_find_result {
	cgx_interface iface;
	cgx_error error;
};

// cgx_function_find_result is the return value for cgx_function_find().
struct cgx_function_find_result {
	cgx_function function;
	cgx_error error;
};

// cgx_function_run_result is the return value for cgx_function_run().
struct cgx_function_run_result {
	cgx_value* values;
	uint32_t value_size;
	cgx_error error;
};

// cgx_value_new_result is the return value for cgx_value_new_*().
struct cgx_value_new_result {
	cgx_value value;
	cgx_error error;
};

// cgx_value_host_buffer_result is the return value for cgx_value_host_buffer().
struct cgx_value_host_buffer_result {
	cgx_host_buffer buffer;
	cgx_error error;
};

// cgx_value_get_struct_result is the return value for cgx_value_get_struct.
struct cgx_value_get_struct_result {
	cgx_struct strct;
	cgx_error error;
};

// cgx_struct_field_element describes a structure field.
struct cgx_struct_field_element {
	const char* name;
	enum cgx_value_kind kind;
};

// cgx_struct_field_list_result is the return value for cgx_struct_field_list().
struct cgx_struct_field_list_result {
	struct cgx_struct_field_element* field;
	uint32_t field_size;

	cgx_error error;
};

// cgx_shape_axes_result is the return value for cgx_shape_axes().
struct cgx_shape_axes_result {
	const int64_t* axis_lengths;
	uint32_t num_axes;
	cgx_error error;
};

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern GoUintptr cgx_release_reference(cgx_handle h);
extern GoUintptr cgx_release_references(cgx_handle* ptr, uint32_t size);

// cgx_handle_count returns the number of outstanding handles.
//
// For testing only.
//
extern int64_t cgx_handle_count();

// cgx_handle_dump returns a full list of all outstanding handles.
//
// For testing only.
//
extern cchar_t* cgx_handle_dump();
extern cchar_t* cgx_error_message(cgx_error cgxError);
extern cchar_t* cgx_error_debug_message(cgx_error cgxError);
extern struct cgx_device_get_result cgx_device_get(cgx_runtime cgxRuntime, GoInt deviceIdx);
extern cgx_runtime cgx_device_get_runtime(cgx_device cgxDevice);
extern struct cgx_package_ir_load_result cgx_package_ir_load(cgx_runtime cgxRuntime, cchar_t* pathPtr);
extern cgx_package cgx_package_ir_build_for(cgx_package_ir cgxPackageIR, cgx_device cgxDevice);
extern cchar_t* cgx_package_ir_name(cgx_package_ir cgxPackageIR);
extern cchar_t* cgx_package_ir_fullname(cgx_package_ir cgxPackageIR);
extern struct cgx_list_statics_result cgx_package_list_statics(cgx_package cgxPackage);
extern GoUint8 cgx_static_has(cgx_package cgxPackage, cchar_t* staticNamePtr);
extern struct cgx_static_find_result cgx_static_find(cgx_package cgxPackage, cchar_t* staticNamePtr);
extern cchar_t* cgx_static_name(cgx_static cgxStatic);
extern cgx_error cgx_static_set(cgx_static cgxStatic, GoInt64 val);
extern void cgx_free_list_statics_result(struct cgx_list_statics_result* res);
extern struct cgx_list_functions_result cgx_package_list_functions(cgx_package cgxPackage);
extern void cgx_free_list_functions_result(struct cgx_list_functions_result* res);
extern cgx_package_ir cgx_package_get_ir(cgx_package cgxPackage);
extern struct cgx_list_interfaces_result cgx_package_list_interfaces(cgx_package cgxPackage);
extern void cgx_free_list_interfaces_result(struct cgx_list_interfaces_result* res);
extern struct cgx_interface_find_result cgx_interface_find(cgx_package cgxPackage, cchar_t* cname);
extern GoUint8 cgx_function_has(cgx_package cgxPackage, cchar_t* funcNamePtr);
extern struct cgx_function_find_result cgx_function_find(cgx_package cgxPackage, cchar_t* funcNamePtr);
extern struct cgx_function_run_result cgx_function_run(cgx_function cgxFunction, cgx_value cgxReceiver, int argCount, cgx_value* args);
extern cchar_t* cgx_function_name(cgx_function cgxFunction);
extern cchar_t* cgx_function_string(cgx_function cgxFunction);
extern cchar_t* cgx_function_doc(cgx_function cgxFunction);
extern struct cgx_function_signature_result cgx_function_signature(cgx_function cgxFunction);
extern void cgx_free_function_signature_result(struct cgx_function_signature_result* cgxSignature);
extern GoInt cgx_function_num_params(cgx_function cgxFunction);
extern enum cgx_value_kind cgx_function_param_dtype(cgx_function cgxFunction, GoInt arg);
extern void cgx_free_function_run_result(struct cgx_function_run_result* cgxFunctionResult);
extern struct cgx_value_new_result cgx_value_new_bool(cgx_device cgxDevice, _Bool value);
extern struct cgx_value_new_result cgx_value_new_float32(cgx_device cgxDevice, float value);
extern struct cgx_value_new_result cgx_value_new_float64(cgx_device cgxDevice, double value);
extern struct cgx_value_new_result cgx_value_new_int32(cgx_device cgxDevice, int32_t value);
extern struct cgx_value_new_result cgx_value_new_int64(cgx_device cgxDevice, int64_t value);
extern struct cgx_value_new_result cgx_value_new_uint32(cgx_device cgxDevice, uint32_t value);
extern struct cgx_value_new_result cgx_value_new_uint64(cgx_device cgxDevice, uint64_t value);
extern struct cgx_value_new_result cgx_value_send(cgx_device cgxDevice, cgx_shape cgxShape, cvoid_t* data, uint64_t dataSize);
extern enum cgx_value_kind cgx_value_kind_of(cgx_value cgxValue);
extern cgx_shape cgx_value_shape(cgx_value cgxValue);
extern _Bool cgx_value_get_bool(cgx_value cgxValue);
extern float cgx_value_get_float32(cgx_value cgxValue);
extern double cgx_value_get_float64(cgx_value cgxValue);
extern int32_t cgx_value_get_int32(cgx_value cgxValue);
extern int64_t cgx_value_get_int64(cgx_value cgxValue);
extern uint32_t cgx_value_get_uint32(cgx_value cgxValue);
extern uint64_t cgx_value_get_uint64(cgx_value cgxValue);
extern struct cgx_value_host_buffer_result cgx_value_host_buffer(cgx_value cgxValue);
extern struct cgx_value_get_struct_result cgx_value_get_struct(cgx_value cgxValue);
extern cgx_interface cgx_value_get_interface_type(cgx_package cgxPackage, cgx_value cgxValue);
extern cchar_t* cgx_value_string(cgx_value cgxValue);
extern cgx_shape cgx_shape_new(enum cgx_value_kind dtype, cint64_t* axisLengths, int axisLengthsSize);
extern struct cgx_shape_axes_result cgx_shape_axes(cgx_shape cgxShape);
extern void cgx_free_shape_axes_result(struct cgx_shape_axes_result* cgxShapeResult);
extern int cgx_shape_size(cgx_shape cgxShape);
extern enum cgx_value_kind cgx_shape_element_kind(cgx_shape cgxShape);
extern char* cgx_host_buffer_acquire_data(cgx_host_buffer cgxHostBuffer);
extern void cgx_host_buffer_release_data(cgx_host_buffer cgxHostBuffer, char* data);
extern struct cgx_value_new_result cgx_struct_field_get(cgx_struct cgxStruct, cchar_t* fieldNamePtr);
extern cgx_error cgx_struct_field_set(cgx_struct cgxStruct, cchar_t* fieldNamePtr, cgx_value cgxValue);
extern struct cgx_struct_field_list_result cgx_struct_field_list(cgx_struct cgxStruct);
extern void cgx_free_struct_field_list_result(struct cgx_struct_field_list_result* cgxFieldList);
extern struct cgx_function_find_result cgx_interface_method_find(cgx_interface cgxIFace, cchar_t* methodNamePtr);
extern cchar_t* cgx_interface_name(cgx_interface cgxIFace);
extern cchar_t* cgx_interface_package_name(cgx_interface cgxIFace);
extern struct cgx_list_functions_result cgx_interface_list_methods(cgx_interface cgxIFace);

#ifdef __cplusplus
}
#endif
