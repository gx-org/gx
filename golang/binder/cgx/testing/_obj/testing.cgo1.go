// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/runner/work/gx/gx/golang/binder/cgx/testing/testing.go:1:1
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package testing provide a cgx runtime for GX testing.
// The runtime includes GX test files statically linked in the binary.
package testing

import (
	"testing"

	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/build/builder"
	"github.com/gx-org/gx/cgx/handle"
	"github.com/gx-org/gx/golang/backend"
	gxtesting "github.com/gx-org/gx/tests/testing"
)

// #include <gx/golang/binder/cgx/cgx.h>
import _ "unsafe"

//export cgx_testing_builder
func cgx_testing_builder()  /*line :33:28*/_Ctype_cgx_builder /*line :33:41*/ {
	return  /*line :34:9*/_Ctype_cgx_builder /*line :34:22*/(handle.Wrap[*builder.Builder](gxtesting.NewBuilderStaticSource(nil)))
}

//export cgx_testing_runtime
func cgx_testing_runtime()  /*line :38:28*/_Ctype_struct_cgx_runtime_new_result /*line :38:59*/ {
	bld := gxtesting.NewBuilderStaticSource(nil)
	rtm := backend.New(bld)
	return  /*line :41:9*/_Ctype_struct_cgx_runtime_new_result /*line :41:40*/{
		runtime:  /*line :42:12*/_Ctype_cgx_runtime /*line :42:25*/(handle.Wrap[*api.Runtime](rtm)),
	}
}

// CheckHandleCount compares the current handle count to a reference.
// Signal a testing error if the two counts do not match.
func CheckHandleCount(t *testing.T, startCount int) {
	endCount := handle.Count()
	if endCount != startCount {
		t.Errorf("handles are leaking: started with %d and ended with %d\nActive handles:\n%s", startCount, endCount, handle.Dump())
	}
}
