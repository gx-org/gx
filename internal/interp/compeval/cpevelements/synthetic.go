// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cpevelements

import (
	"go/ast"

	"github.com/gx-org/gx/build/ir/annotations"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/interp/elements"
)

type (
	// MacroElement is an element generated by calling a macro implementation.
	MacroElement interface {
		ir.Element
		From() *Macro
	}

	// FuncASTBuilder builds GX functions programmatically.
	FuncASTBuilder interface {
		MacroElement
		BuildDecl(target ir.PkgFunc) (*ast.FuncDecl, bool)
		BuildBody(ir.Fetcher, ir.Func) (*ast.BlockStmt, []*SyntheticFuncDecl, bool)
		BuildFuncLit(ir.Fetcher) (*ast.FuncLit, bool)
	}

	// FuncAnnotator builds a synthetic function.
	FuncAnnotator interface {
		MacroElement
		Annotate(ir.Fetcher, ir.PkgFunc) bool
	}

	// SyntheticFuncDecl is a synthetic package function declaration.
	SyntheticFuncDecl struct {
		Builder FuncASTBuilder
		F       *ast.FuncDecl
	}
)

// CoreMacroElement is a helper structure to implement macros.
type CoreMacroElement struct {
	mac  *Macro
	key  annotations.Key
	call elements.CallAt
}

var _ MacroElement = (*CoreMacroElement)(nil)

// Element returns a core macro element for custom elements.
func (f *Macro) Element(call elements.CallAt) CoreMacroElement {
	return f.ElementWithKey(call, f.IR())
}

// ElementWithKey returns a core macro element for custom elements given a key for annotations.
func (f *Macro) ElementWithKey(call elements.CallAt, key annotations.Key) CoreMacroElement {
	return CoreMacroElement{mac: f, key: key, call: call}
}

// Type returns the type of a macro function.
func (CoreMacroElement) Type() ir.Type {
	return ir.UnknownType()
}

// From returns the macro function that has generated this macro element.
func (m *CoreMacroElement) From() *Macro {
	return m.mac
}

// Source returns the source call from where the element was created.
func (m *CoreMacroElement) Source() ast.Node {
	return m.call.Source()
}

// Key of the macro that has generated this element.
func (m *CoreMacroElement) Key() annotations.Key {
	return m.key
}
