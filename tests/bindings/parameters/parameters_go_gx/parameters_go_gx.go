// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package parameters_go_gx are Go bindings to the GX package:
// github.com/gx-org/gx/tests/bindings/parameters.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package parameters_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/options"
	"github.com/gx-org/gx/api/tracer"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/core"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/pkg/errors"

	_ "github.com/gx-org/gx/tests/bindings/parameters"

	gxdep0 "github.com/gx-org/gx/stdlib/bindings/go/num_go_gx"
	gxdep1 "github.com/gx-org/gx/stdlib/bindings/go/shapes_go_gx"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
	_ = ir.NamedType{}
	_ = tracer.Trace
)

// Load the package for a given runtime.
func Load(rtm *api.Runtime) (*core.Package, error) {
	bpkg, err := rtm.Builder().Build("github.com/gx-org/gx/tests/bindings/parameters")
	if err != nil {
		return nil, err
	}
	deps := make([]*core.Package, 2)
	deps[0], err = gxdep0.Load(rtm)
	if err != nil {
		return nil, err
	}
	deps[1], err = gxdep1.Load(rtm)
	if err != nil {
		return nil, err
	}
	return core.NewPackage(bpkg, deps), nil
}

// BuildFor loads the GX package github.com/gx-org/gx/tests/bindings/parameters
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, opts ...options.PackageOptionFactory) (*Package, error) {
	pkgHandle, err := BuildHandleFor(dev, opts...)
	if err != nil {
		return nil, err
	}
	return pkgHandle.Factory.Package, nil
}

// BuildHandleFor loads the GX package github.com/gx-org/gx/tests/bindings/parameters
// then returns that package for a given device and options.
func BuildHandleFor(dev *api.Device, opts ...options.PackageOptionFactory) (*PackageHandle, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return BuildFromIR(pkg, dev, opts)
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// PackageHandle provides utility functions for the package.
type PackageHandle struct {
	*core.PackageCompileSetup
	Factory *Factory

	// Package dependencies
	gxdep0 *gxdep0.PackageHandle
	gxdep1 *gxdep1.PackageHandle
}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	handle PackageHandle

	// Functions and methods cache
	cacheStructSetNotInSlice     *core.FuncCache
	cacheNewStruct               *core.FuncCache
	cacheAddToStruct             *core.FuncCache
	cacheAddFloat32              *core.FuncCache
	cacheAddInt                  *core.FuncCache
	cacheAddFloat32s             *core.FuncCache
	cacheAddInts                 *core.FuncCache
	cacheLen                     *core.FuncCache
	cacheIota                    *core.FuncCache
	cacheSliceArrayArgConstIndex *core.FuncCache
	cacheSliceArrayArg           *core.FuncCache
	cacheSliceSliceArg           *core.FuncCache
	cacheNewNotInSlice           *core.FuncCache
}

// BuildFromIR builds a package for a device once it has been loaded.
func BuildFromIR(irPkg *core.Package, dev *api.Device, optionFactories []options.PackageOptionFactory) (*PackageHandle, error) {
	pkg := &Package{}
	pkg.handle.Factory = &Factory{Package: pkg}
	pkg.handle.PackageCompileSetup = irPkg.Setup(dev, optionFactories)
	// Build dependencies.
	var err error
	pkg.handle.gxdep0, err = core.BuildDep[*gxdep0.PackageHandle](
		pkg.handle.PackageCompileSetup,
		0,
		gxdep0.BuildFromIR,
	)
	if err != nil {
		return nil, err
	}
	pkg.handle.gxdep1, err = core.BuildDep[*gxdep1.PackageHandle](
		pkg.handle.PackageCompileSetup,
		1,
		gxdep1.BuildFromIR,
	)
	if err != nil {
		return nil, err
	}

	// Initialise function and method caches.
	pkg.cacheStructSetNotInSlice, err = pkg.handle.NewCache("Struct", "SetNotInSlice")
	if err != nil {
		return nil, err
	}
	pkg.cacheNewStruct, err = pkg.handle.NewCache("", "NewStruct")
	if err != nil {
		return nil, err
	}
	pkg.cacheAddToStruct, err = pkg.handle.NewCache("", "AddToStruct")
	if err != nil {
		return nil, err
	}
	pkg.cacheAddFloat32, err = pkg.handle.NewCache("", "AddFloat32")
	if err != nil {
		return nil, err
	}
	pkg.cacheAddInt, err = pkg.handle.NewCache("", "AddInt")
	if err != nil {
		return nil, err
	}
	pkg.cacheAddFloat32s, err = pkg.handle.NewCache("", "AddFloat32s")
	if err != nil {
		return nil, err
	}
	pkg.cacheAddInts, err = pkg.handle.NewCache("", "AddInts")
	if err != nil {
		return nil, err
	}
	pkg.cacheLen, err = pkg.handle.NewCache("", "Len")
	if err != nil {
		return nil, err
	}
	pkg.cacheIota, err = pkg.handle.NewCache("", "Iota")
	if err != nil {
		return nil, err
	}
	pkg.cacheSliceArrayArgConstIndex, err = pkg.handle.NewCache("", "SliceArrayArgConstIndex")
	if err != nil {
		return nil, err
	}
	pkg.cacheSliceArrayArg, err = pkg.handle.NewCache("", "SliceArrayArg")
	if err != nil {
		return nil, err
	}
	pkg.cacheSliceSliceArg, err = pkg.handle.NewCache("", "SliceSliceArg")
	if err != nil {
		return nil, err
	}
	pkg.cacheNewNotInSlice, err = pkg.handle.NewCache("", "NewNotInSlice")
	if err != nil {
		return nil, err
	}

	return &pkg.handle, err
}

var Size SizeStatic

type SizeStatic struct {
	value ir.Int
}

func (SizeStatic) Set(value ir.Int) options.PackageOptionFactory {
	return func(plat platform.Platform) options.PackageOption {
		hostValue := types.DefaultInt(value)
		return options.PackageVarSetValue{
			Pkg:   "github.com/gx-org/gx/tests/bindings/parameters",
			Var:   "Size",
			Value: hostValue.GXValue(),
		}
	}
}

// New returns a new structure.
func (pkg *Package) NewStruct(arg0 types.Atom[float32]) (_ *Struct, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // offset float32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheNewStruct.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := pkg.handle.Factory

	var out0 *Struct
	out0, err = fty.MarshalStruct(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// AddToStruct adds a scalar to the structure field.
func (pkg *Package) AddToStruct(arg0 *Struct) (_ *Struct, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // a parameters.Struct
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheAddToStruct.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := pkg.handle.Factory

	var out0 *Struct
	out0, err = fty.MarshalStruct(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// AddFloat32 adds x and y.
func (pkg *Package) AddFloat32(arg0 types.Atom[float32], arg1 types.Atom[float32]) (_ types.Atom[float32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x float32
		arg1.Bridge().GXValue(), // y float32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheAddFloat32.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[float32](out0Value)

	return out0, nil
}

// AddInt adds x and y.
func (pkg *Package) AddInt(arg0 types.Atom[int64], arg1 types.Atom[int64]) (_ types.Atom[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x int64
		arg1.Bridge().GXValue(), // y int64
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheAddInt.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[int64](out0Value)

	return out0, nil
}

// Add x and y.
func (pkg *Package) AddFloat32s(arg0 types.Array[float32], arg1 types.Array[float32]) (_ types.Array[float32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x [a]float32
		arg1.Bridge().GXValue(), // y [a]float32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheAddFloat32s.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[float32](out0Value)

	return out0, nil
}

// AddInts x and y.
func (pkg *Package) AddInts(arg0 types.Array[int64], arg1 types.Array[int64]) (_ types.Array[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x [a]int64
		arg1.Bridge().GXValue(), // y [a]int64
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheAddInts.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[int64](out0Value)

	return out0, nil
}

// Len returns the outmost dimension of x.
func (pkg *Package) Len(arg0 types.Array[float32]) (_ types.Atom[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x []float32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheLen.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[int64](out0Value)

	return out0, nil
}

// Iota returns an array filled with numbers.
func (pkg *Package) Iota() (_ types.Array[int64], err error) {
	var args []values.Value = nil
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheIota.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[int64](out0Value)

	return out0, nil
}

// SliceArrayArg checks that we can slice an array type argument.
func (pkg *Package) SliceArrayArgConstIndex(arg0 types.Array[float32]) (_ types.Array[float32], _ types.Array[float32], _ types.Array[float32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // a [3][2]float32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheSliceArrayArgConstIndex.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[float32](out0Value)

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewArray[float32](out1Value)

	out2Value, ok := outputs[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out2 := types.NewArray[float32](out2Value)

	return out0, out1, out2, nil
}

// SliceArrayArg checks that we can slice an array type argument.
func (pkg *Package) SliceArrayArg(arg0 types.Array[float32], arg1 types.Atom[int32]) (_ types.Array[float32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // a [3][2]float32
		arg1.Bridge().GXValue(), // i int32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheSliceArrayArg.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[float32](out0Value)

	return out0, nil
}

// SliceSliceArg checks that we can slice a slice.
func (pkg *Package) SliceSliceArg(arg0 *types.Slice[types.Array[float32]], arg1 types.Atom[int32]) (_ types.Array[float32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // a [][2]float32
		arg1.Bridge().GXValue(), // i int32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheSliceSliceArg.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[float32](out0Value)

	return out0, nil
}

// NewNotInSlice returns a NotInSlice instance with its Val attributes assigned to val.
func (pkg *Package) NewNotInSlice(arg0 types.Atom[int32]) (_ *NotInSlice, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // val int32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheNewNotInSlice.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := pkg.handle.Factory

	var out0 *NotInSlice
	out0, err = fty.MarshalNotInSlice(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// handleNotInSlice stores the backend handles of NotInSlice.
type handleNotInSlice struct {
	pkg   *Package
	struc *ir.NamedType
	owner *NotInSlice
}

// Type of the value.
func (h *handleNotInSlice) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleNotInSlice) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleNotInSlice) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleNotInSlice) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleNotInSlice) String() string {
	bld := strings.Builder{}
	bld.WriteString("NotInSlice{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "Val", any(h.owner.Val).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// NotInSlice stores the handle of NotInSlice on a device.
type NotInSlice struct {
	handle handleNotInSlice
	value  *values.NamedType

	Val types.Atom[int32]
}

var (
	_ types.Bridger      = (*NotInSlice)(nil)
	_ types.StructBridge = (*handleNotInSlice)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleNotInSlice) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalNotInSlice populates the receiver fields with device handles.
func (fty *Factory) MarshalNotInSlice(val values.Value) (s *NotInSlice, err error) {
	s = fty.NewNotInSlice()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set NotInSlice: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type NotInSlice: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewAtom[int32](field0Value)

	s.Val = field0
	return
}

func (s NotInSlice) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *NotInSlice) Bridge() types.Bridge { return &s.handle }

// NewNotInSlice returns a handle on named type NotInSlice.
func (fac *Factory) NewNotInSlice() *NotInSlice {
	s := &NotInSlice{}
	typ := fac.Package.handle.IR().Decls.TypeByName("NotInSlice")
	s.handle = handleNotInSlice{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleNotInSlice)(nil)

func (h *handleNotInSlice) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "Val":
		return nil, errors.Errorf("cannot create a new instance for field Val: type types.Atom[int32] not supported")

	default:
		return nil, errors.Errorf("structure NotInSlice has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleNotInSlice) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type NotInSlice: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "Val":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[int32])
		if !ok {
			return errors.Errorf("cannot set field Val: cannot cast %T to types.Atom[int32]", bridger)
		}
		h.owner.Val = fieldValue
		structVal.SetField("Val", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure NotInSlice has no field %q", name)
	}

}

// handleInSlice stores the backend handles of InSlice.
type handleInSlice struct {
	pkg   *Package
	struc *ir.NamedType
	owner *InSlice
}

// Type of the value.
func (h *handleInSlice) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleInSlice) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleInSlice) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleInSlice) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleInSlice) String() string {
	bld := strings.Builder{}
	bld.WriteString("InSlice{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "Val", any(h.owner.Val).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// InSlice stores the handle of InSlice on a device.
type InSlice struct {
	handle handleInSlice
	value  *values.NamedType

	Val types.Atom[int32]
}

var (
	_ types.Bridger      = (*InSlice)(nil)
	_ types.StructBridge = (*handleInSlice)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleInSlice) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalInSlice populates the receiver fields with device handles.
func (fty *Factory) MarshalInSlice(val values.Value) (s *InSlice, err error) {
	s = fty.NewInSlice()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set InSlice: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type InSlice: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewAtom[int32](field0Value)

	s.Val = field0
	return
}

func (s InSlice) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *InSlice) Bridge() types.Bridge { return &s.handle }

// NewInSlice returns a handle on named type InSlice.
func (fac *Factory) NewInSlice() *InSlice {
	s := &InSlice{}
	typ := fac.Package.handle.IR().Decls.TypeByName("InSlice")
	s.handle = handleInSlice{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleInSlice)(nil)

func (h *handleInSlice) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "Val":
		return nil, errors.Errorf("cannot create a new instance for field Val: type types.Atom[int32] not supported")

	default:
		return nil, errors.Errorf("structure InSlice has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleInSlice) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type InSlice: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "Val":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[int32])
		if !ok {
			return errors.Errorf("cannot set field Val: cannot cast %T to types.Atom[int32]", bridger)
		}
		h.owner.Val = fieldValue
		structVal.SetField("Val", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure InSlice has no field %q", name)
	}

}

// handleStruct stores the backend handles of Struct.
type handleStruct struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Struct
}

// Type of the value.
func (h *handleStruct) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleStruct) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleStruct) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleStruct) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleStruct) String() string {
	bld := strings.Builder{}
	bld.WriteString("Struct{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "A", any(h.owner.A).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "B", any(h.owner.B).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "C", any(h.owner.C).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "D", any(h.owner.D).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "specialIndex", any(h.owner.specialIndex).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "SpecialValue", any(h.owner.SpecialValue).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// Struct stores the handle of Struct on a device.
type Struct struct {
	handle handleStruct
	value  *values.NamedType

	A            types.Array[float32]
	B            *types.Slice[types.Atom[float32]]
	C            *types.Slice[*InSlice]
	D            *NotInSlice
	specialIndex types.Atom[int32]
	SpecialValue types.Atom[float32]
}

var (
	_ types.Bridger      = (*Struct)(nil)
	_ types.StructBridge = (*handleStruct)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleStruct) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalStruct populates the receiver fields with device handles.
func (fty *Factory) MarshalStruct(val values.Value) (s *Struct, err error) {
	s = fty.NewStruct()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set Struct: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type Struct: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewArray[float32](field0Value)

	field1Slice, ok := fields[1].(*values.Slice)
	if !ok {
		err = fmt.Errorf("cannot use value %T to set []<no value>: not a slice", fields[1])
		return
	}
	field1Elements := make([]types.Atom[float32], field1Slice.Len())
	for i := 0; i < field1Slice.Len(); i++ {
		field1HandleI := field1Slice.Element(i)

		field1ElmtIValue, ok := field1HandleI.(values.Array)
		if !ok {
			err = errors.Errorf("cannot cast %T to %s", field1HandleI, reflect.TypeFor[*values.DeviceArray]().Name())
			return
		}
		field1ElmtI := types.NewAtom[float32](field1ElmtIValue)

		field1Elements[i] = field1ElmtI
	}
	field1, err := types.NewSlice[types.Atom[float32]](
		field1Slice.SliceType(),
		field1Elements,
	)
	if err != nil {
		return nil, err
	}

	field2Slice, ok := fields[2].(*values.Slice)
	if !ok {
		err = fmt.Errorf("cannot use value %T to set []<no value>: not a slice", fields[2])
		return
	}
	field2Elements := make([]*InSlice, field2Slice.Len())
	for i := 0; i < field2Slice.Len(); i++ {
		field2HandleI := field2Slice.Element(i)
		var field2ElmtI *InSlice
		field2ElmtI, err = fty.MarshalInSlice(field2HandleI)
		if err != nil {
			return
		}
		field2Elements[i] = field2ElmtI
	}
	field2, err := types.NewSlice[*InSlice](
		field2Slice.SliceType(),
		field2Elements,
	)
	if err != nil {
		return nil, err
	}

	var field3 *NotInSlice
	field3, err = fty.MarshalNotInSlice(fields[3])
	if err != nil {
		return
	}

	field4Value, ok := fields[4].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[4], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field4 := types.NewAtom[int32](field4Value)

	field5Value, ok := fields[5].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[5], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field5 := types.NewAtom[float32](field5Value)

	s.A = field0
	s.B = field1
	s.C = field2
	s.D = field3
	s.specialIndex = field4
	s.SpecialValue = field5
	return
}

func (s Struct) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Struct) Bridge() types.Bridge { return &s.handle }

// NewStruct returns a handle on named type Struct.
func (fac *Factory) NewStruct() *Struct {
	s := &Struct{}
	typ := fac.Package.handle.IR().Decls.TypeByName("Struct")
	s.handle = handleStruct{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleStruct)(nil)

func (h *handleStruct) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "A":
		return nil, errors.Errorf("cannot create a new instance for field A: type types.Array[float32] not supported")
	case "B":
		slice, err := types.NewEmptySlice[types.Atom[float32]](field.Type(), nil)
		if err != nil {
			return nil, err
		}
		return slice.Bridge(), nil
	case "C":
		slice, err := types.NewEmptySlice[*InSlice](field.Type(), func() (types.Bridge, error) {
			return h.pkg.handle.Factory.NewInSlice().Bridge(), nil
		})
		if err != nil {
			return nil, err
		}
		return slice.Bridge(), nil
	case "D":
		return h.pkg.handle.Factory.NewNotInSlice().Bridge(), nil
	case "specialIndex":
		return nil, errors.Errorf("cannot create a new instance for field specialIndex: type types.Atom[int32] not supported")
	case "SpecialValue":
		return nil, errors.Errorf("cannot create a new instance for field SpecialValue: type types.Atom[float32] not supported")

	default:
		return nil, errors.Errorf("structure Struct has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleStruct) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type Struct: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "A":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field A: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.A = fieldValue
		structVal.SetField("A", val.GXValue())
		return nil

	case "B":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*types.Slice[types.Atom[float32]])
		if !ok {
			return errors.Errorf("cannot set field B: cannot cast %T to *types.Slice[types.Atom[float32]]", bridger)
		}
		h.owner.B = fieldValue
		structVal.SetField("B", val.GXValue())
		return nil

	case "C":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*types.Slice[*InSlice])
		if !ok {
			return errors.Errorf("cannot set field C: cannot cast %T to *types.Slice[*InSlice]", bridger)
		}
		h.owner.C = fieldValue
		structVal.SetField("C", val.GXValue())
		return nil

	case "D":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*NotInSlice)
		if !ok {
			return errors.Errorf("cannot set field D: cannot cast %T to *NotInSlice", bridger)
		}
		h.owner.D = fieldValue
		structVal.SetField("D", val.GXValue())
		return nil

	case "specialIndex":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[int32])
		if !ok {
			return errors.Errorf("cannot set field specialIndex: cannot cast %T to types.Atom[int32]", bridger)
		}
		h.owner.specialIndex = fieldValue
		structVal.SetField("specialIndex", val.GXValue())
		return nil

	case "SpecialValue":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field SpecialValue: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.SpecialValue = fieldValue
		structVal.SetField("SpecialValue", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Struct has no field %q", name)
	}

}

// SetNotInSlice tests setting a structure field with a structure.
func (recv *Struct) SetNotInSlice(arg0 *NotInSlice) (_ *Struct, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // d parameters.NotInSlice
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheStructSetNotInSlice.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *Struct
	out0, err = fty.MarshalStruct(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}
