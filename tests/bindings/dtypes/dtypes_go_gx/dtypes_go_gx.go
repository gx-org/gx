// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package dtypes_go_gx are Go bindings to the GX package:
// github.com/gx-org/gx/tests/bindings/dtypes.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package dtypes_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/options"
	"github.com/gx-org/gx/api/tracer"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/core"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/pkg/errors"

	_ "github.com/gx-org/gx/tests/bindings/dtypes"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
	_ = ir.NamedType{}
	_ = tracer.Trace
)

// Load the package for a given runtime.
func Load(rtm *api.Runtime) (*core.Package, error) {
	bpkg, err := rtm.Builder().Build("github.com/gx-org/gx/tests/bindings/dtypes")
	if err != nil {
		return nil, err
	}
	deps := make([]*core.Package, 0)
	return core.NewPackage(bpkg, deps), nil
}

// BuildFor loads the GX package github.com/gx-org/gx/tests/bindings/dtypes
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, opts ...options.PackageOptionFactory) (*Package, error) {
	pkgHandle, err := BuildHandleFor(dev, opts...)
	if err != nil {
		return nil, err
	}
	return pkgHandle.Factory.Package, nil
}

// BuildHandleFor loads the GX package github.com/gx-org/gx/tests/bindings/dtypes
// then returns that package for a given device and options.
func BuildHandleFor(dev *api.Device, opts ...options.PackageOptionFactory) (*PackageHandle, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return BuildFromIR(pkg, dev, opts)
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// PackageHandle provides utility functions for the package.
type PackageHandle struct {
	*core.PackageCompileSetup
	Factory *Factory

	// Package dependencies

}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	handle PackageHandle

	// Functions and methods cache
	cacheBool         *core.FuncCache
	cacheFloat32      *core.FuncCache
	cacheFloat64      *core.FuncCache
	cacheInt32        *core.FuncCache
	cacheInt64        *core.FuncCache
	cacheUint32       *core.FuncCache
	cacheUint64       *core.FuncCache
	cacheArrayBool    *core.FuncCache
	cacheArrayFloat32 *core.FuncCache
	cacheArrayFloat64 *core.FuncCache
	cacheArrayInt32   *core.FuncCache
	cacheArrayInt64   *core.FuncCache
	cacheArrayUint32  *core.FuncCache
	cacheArrayUint64  *core.FuncCache
}

// BuildFromIR builds a package for a device once it has been loaded.
func BuildFromIR(irPkg *core.Package, dev *api.Device, optionFactories []options.PackageOptionFactory) (*PackageHandle, error) {
	pkg := &Package{}
	pkg.handle.Factory = &Factory{Package: pkg}
	pkg.handle.PackageCompileSetup = irPkg.Setup(dev, optionFactories)
	// Build dependencies.
	var err error

	// Initialise function and method caches.
	pkg.cacheBool, err = pkg.handle.NewCache("", "Bool")
	if err != nil {
		return nil, err
	}
	pkg.cacheFloat32, err = pkg.handle.NewCache("", "Float32")
	if err != nil {
		return nil, err
	}
	pkg.cacheFloat64, err = pkg.handle.NewCache("", "Float64")
	if err != nil {
		return nil, err
	}
	pkg.cacheInt32, err = pkg.handle.NewCache("", "Int32")
	if err != nil {
		return nil, err
	}
	pkg.cacheInt64, err = pkg.handle.NewCache("", "Int64")
	if err != nil {
		return nil, err
	}
	pkg.cacheUint32, err = pkg.handle.NewCache("", "Uint32")
	if err != nil {
		return nil, err
	}
	pkg.cacheUint64, err = pkg.handle.NewCache("", "Uint64")
	if err != nil {
		return nil, err
	}
	pkg.cacheArrayBool, err = pkg.handle.NewCache("", "ArrayBool")
	if err != nil {
		return nil, err
	}
	pkg.cacheArrayFloat32, err = pkg.handle.NewCache("", "ArrayFloat32")
	if err != nil {
		return nil, err
	}
	pkg.cacheArrayFloat64, err = pkg.handle.NewCache("", "ArrayFloat64")
	if err != nil {
		return nil, err
	}
	pkg.cacheArrayInt32, err = pkg.handle.NewCache("", "ArrayInt32")
	if err != nil {
		return nil, err
	}
	pkg.cacheArrayInt64, err = pkg.handle.NewCache("", "ArrayInt64")
	if err != nil {
		return nil, err
	}
	pkg.cacheArrayUint32, err = pkg.handle.NewCache("", "ArrayUint32")
	if err != nil {
		return nil, err
	}
	pkg.cacheArrayUint64, err = pkg.handle.NewCache("", "ArrayUint64")
	if err != nil {
		return nil, err
	}

	return &pkg.handle, err
}

func (pkg *Package) Bool(arg0 types.Atom[bool]) (_ types.Atom[bool], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x bool
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheBool.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[bool](out0Value)

	return out0, nil
}

func (pkg *Package) Float32(arg0 types.Atom[float32]) (_ types.Atom[float32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x float32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheFloat32.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[float32](out0Value)

	return out0, nil
}

func (pkg *Package) Float64(arg0 types.Atom[float64]) (_ types.Atom[float64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x float64
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheFloat64.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[float64](out0Value)

	return out0, nil
}

func (pkg *Package) Int32(arg0 types.Atom[int32]) (_ types.Atom[int32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x int32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheInt32.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[int32](out0Value)

	return out0, nil
}

func (pkg *Package) Int64(arg0 types.Atom[int64]) (_ types.Atom[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x int64
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheInt64.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[int64](out0Value)

	return out0, nil
}

func (pkg *Package) Uint32(arg0 types.Atom[uint32]) (_ types.Atom[uint32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x uint32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheUint32.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[uint32](out0Value)

	return out0, nil
}

func (pkg *Package) Uint64(arg0 types.Atom[uint64]) (_ types.Atom[uint64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x uint64
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheUint64.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[uint64](out0Value)

	return out0, nil
}

func (pkg *Package) ArrayBool(arg0 types.Array[bool]) (_ types.Array[bool], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x [2][3]bool
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheArrayBool.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[bool](out0Value)

	return out0, nil
}

func (pkg *Package) ArrayFloat32(arg0 types.Array[float32]) (_ types.Array[float32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x [2][3]float32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheArrayFloat32.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[float32](out0Value)

	return out0, nil
}

func (pkg *Package) ArrayFloat64(arg0 types.Array[float64]) (_ types.Array[float64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x [2][3]float64
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheArrayFloat64.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[float64](out0Value)

	return out0, nil
}

func (pkg *Package) ArrayInt32(arg0 types.Array[int32]) (_ types.Array[int32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x [2][3]int32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheArrayInt32.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[int32](out0Value)

	return out0, nil
}

func (pkg *Package) ArrayInt64(arg0 types.Array[int64]) (_ types.Array[int64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x [2][3]int64
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheArrayInt64.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[int64](out0Value)

	return out0, nil
}

func (pkg *Package) ArrayUint32(arg0 types.Array[uint32]) (_ types.Array[uint32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x [2][3]uint32
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheArrayUint32.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[uint32](out0Value)

	return out0, nil
}

func (pkg *Package) ArrayUint64(arg0 types.Array[uint64]) (_ types.Array[uint64], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x [2][3]uint64
	}
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheArrayUint64.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[uint64](out0Value)

	return out0, nil
}
