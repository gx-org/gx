// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package unexported_go_gx are Go bindings to the GX package:
// github.com/gx-org/gx/tests/bindings/unexported.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package unexported_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/options"
	"github.com/gx-org/gx/api/tracer"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/core"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/pkg/errors"

	_ "github.com/gx-org/gx/tests/bindings/unexported"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
	_ = ir.NamedType{}
	_ = tracer.Trace
)

// Load the package for a given runtime.
func Load(rtm *api.Runtime) (*core.Package, error) {
	bpkg, err := rtm.Builder().Build("github.com/gx-org/gx/tests/bindings/unexported")
	if err != nil {
		return nil, err
	}
	deps := make([]*core.Package, 0)
	return core.NewPackage(bpkg, deps), nil
}

// BuildFor loads the GX package github.com/gx-org/gx/tests/bindings/unexported
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, opts ...options.PackageOptionFactory) (*Package, error) {
	pkgHandle, err := BuildHandleFor(dev, opts...)
	if err != nil {
		return nil, err
	}
	return pkgHandle.Factory.Package, nil
}

// BuildHandleFor loads the GX package github.com/gx-org/gx/tests/bindings/unexported
// then returns that package for a given device and options.
func BuildHandleFor(dev *api.Device, opts ...options.PackageOptionFactory) (*PackageHandle, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return BuildFromIR(pkg, dev, opts)
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// PackageHandle provides utility functions for the package.
type PackageHandle struct {
	*core.PackageCompileSetup
	Factory *Factory

	// Package dependencies

}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	handle PackageHandle

	// Functions and methods cache
	cacheunexportedA *core.FuncCache
	cacheNew         *core.FuncCache
}

// BuildFromIR builds a package for a device once it has been loaded.
func BuildFromIR(irPkg *core.Package, dev *api.Device, optionFactories []options.PackageOptionFactory) (*PackageHandle, error) {
	pkg := &Package{}
	pkg.handle.Factory = &Factory{Package: pkg}
	pkg.handle.PackageCompileSetup = irPkg.Setup(dev, optionFactories)
	// Build dependencies.
	var err error

	// Initialise function and method caches.
	pkg.cacheunexportedA, err = pkg.handle.NewCache("unexported", "A")
	if err != nil {
		return nil, err
	}
	pkg.cacheNew, err = pkg.handle.NewCache("", "New")
	if err != nil {
		return nil, err
	}

	return &pkg.handle, err
}

func (pkg *Package) New() (_ *unexported, err error) {
	var args []values.Value = nil
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheNew.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := pkg.handle.Factory

	var out0 *unexported
	out0, err = fty.Marshalunexported(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// handleunexported stores the backend handles of unexported.
type handleunexported struct {
	pkg   *Package
	struc *ir.NamedType
	owner *unexported
}

// Type of the value.
func (h *handleunexported) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleunexported) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleunexported) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleunexported) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleunexported) String() string {
	bld := strings.Builder{}
	bld.WriteString("unexported{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "a", any(h.owner.a).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// unexported stores the handle of unexported on a device.
type unexported struct {
	handle handleunexported
	value  *values.NamedType

	a types.Atom[float32]
}

var (
	_ types.Bridger      = (*unexported)(nil)
	_ types.StructBridge = (*handleunexported)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleunexported) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// Marshalunexported populates the receiver fields with device handles.
func (fty *Factory) Marshalunexported(val values.Value) (s *unexported, err error) {
	s = fty.Newunexported()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set unexported: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type unexported: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewAtom[float32](field0Value)

	s.a = field0
	return
}

func (s unexported) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *unexported) Bridge() types.Bridge { return &s.handle }

// Newunexported returns a handle on named type unexported.
func (fac *Factory) Newunexported() *unexported {
	s := &unexported{}
	typ := fac.Package.handle.IR().Decls.TypeByName("unexported")
	s.handle = handleunexported{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleunexported)(nil)

func (h *handleunexported) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "a":
		return nil, errors.Errorf("cannot create a new instance for field a: type types.Atom[float32] not supported")

	default:
		return nil, errors.Errorf("structure unexported has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleunexported) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type unexported: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "a":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field a: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.a = fieldValue
		structVal.SetField("a", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure unexported has no field %q", name)
	}

}

func (recv *unexported) A() (_ types.Atom[float32], err error) {
	var args []values.Value = nil
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheunexportedA.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[float32](out0Value)

	return out0, nil
}
