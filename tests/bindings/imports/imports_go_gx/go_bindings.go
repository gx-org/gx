// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package imports_go_gx are Go bindings to the GX package:
// github.com/gx-org/gx/tests/bindings/imports.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package imports_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/gx-org/gx/interp"
	"github.com/gx-org/gx/interp/state"
	_ "github.com/gx-org/gx/tests/bindings"
	"github.com/pkg/errors"

	gxdep0 "github.com/gx-org/gx/tests/bindings/basic/basic_go_gx"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
)

// Package is the GX package built for a given backend.
type Package struct {
	Runtime *api.Runtime
	IR      *ir.Package
	Tracer  state.Tracer

	gxdep0 *gxdep0.Package
}

// Load the GX package for a given backend.
func Load(rtm *api.Runtime) (*Package, error) {
	irPackage, err := rtm.Builder().Build("github.com/gx-org/gx/tests/bindings/imports")
	if err != nil {
		return nil, err
	}
	pkg := &Package{
		Runtime: rtm,
		IR:      irPackage,
	}

	if pkg.gxdep0, err = gxdep0.Load(rtm); err != nil {
		return nil, err
	}

	return pkg, nil
}

// CompilerFor loads the GX package github.com/gx-org/gx/tests/bindings/imports
// then returns the compiler for a given device and options.
func CompilerFor(rtm *api.Runtime, dev platform.Device, options ...interp.PackageOptionFactory) (*Compiler, error) {
	pkg, err := Load(rtm)
	if err != nil {
		return nil, err
	}
	return pkg.CompilerFor(dev, options...), nil
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Compiler *Compiler
}

// Compiler compiles GX functions for a given device.
type Compiler struct {
	Package *Package
	Device  platform.Device
	Factory *Factory

	options []interp.PackageOption

	gxdep0 *gxdep0.Compiler

	NewBasic          NewBasic
	NewImporter       NewImporter
	ReturnFromBasic   ReturnFromBasic
	methodImporterAdd methodBase
}

// AppendOptions appends options to the compiler.
func (cmpl *Compiler) AppendOptions(options ...interp.PackageOptionFactory) {
	plat := cmpl.Package.Runtime.Platform()
	for _, opt := range options {
		cmpl.options = append(cmpl.options, opt(plat))
	}
}

// CompilerFor returns a compiler for a device and options.
func (pkg *Package) CompilerFor(dev platform.Device, options ...interp.PackageOptionFactory) *Compiler {
	c := &Compiler{
		Package: pkg,
		Device:  dev,
	}
	c.Factory = &Factory{Compiler: c}
	c.AppendOptions(options...)

	c.NewBasic = NewBasic{
		methodBase: methodBase{
			compiler: c,
			function: c.Package.IR.Funcs[0].(*ir.FuncDecl),
		},
	}
	c.NewImporter = NewImporter{
		methodBase: methodBase{
			compiler: c,
			function: c.Package.IR.Funcs[1].(*ir.FuncDecl),
		},
	}
	c.ReturnFromBasic = ReturnFromBasic{
		methodBase: methodBase{
			compiler: c,
			function: c.Package.IR.Funcs[2].(*ir.FuncDecl),
		},
	}

	c.methodImporterAdd = methodBase{
		compiler: c,
		function: c.Package.IR.Types[0].Methods[0].(*ir.FuncDecl),
	}

	c.gxdep0 = c.Package.gxdep0.CompilerFor(dev, options...)

	return c
}

// handleImporter stores the backend handles of Importer.
type handleImporter struct {
	compiler *Compiler
	struc    *ir.NamedType
	owner    *Importer

	runnerAdd *MethodImporterAdd
}

// MethodImporterAdd compiles and runs the GX function Add for a device.
// Add returns the result from Basic.AddPrivate.
type MethodImporterAdd struct {
	methodBase
	receiver handleImporter
}

// Run first compiles Add for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *MethodImporterAdd) Run() (_ types.Atom[int32], err error) {
	var args []values.Value = nil
	if f.runner == nil {
		f.runner, err = f.compiler.Package.Runtime.Compile(f.compiler.Device, f.function, f.receiver.GXValue(), args, f.compiler.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(f.receiver.GXValue(), args, f.compiler.Package.Tracer)
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[int32](out0Value)

	return out0, nil
}

// Type of the value.
func (h *handleImporter) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleImporter) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleImporter) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleImporter) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleImporter) String() string {
	bld := strings.Builder{}
	bld.WriteString("Importer{\n")

	bld.WriteString(fmt.Sprintf("%s:%s\n", "Basic", any(h.owner.Basic).(fmt.Stringer).String()))

	bld.WriteString("}")
	return bld.String()
}

// Importer stores the handle of Importer on a device.
type Importer struct {
	handle handleImporter
	value  *values.Struct

	Basic *gxdep0.Basic
}

var (
	_ types.Bridger      = (*Importer)(nil)
	_ types.StructBridge = (*handleImporter)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleImporter) StructValue() *values.Struct {
	return h.owner.value
}

// MarshalImporter populates the receiver fields with device handles.
func (cmpl *Compiler) MarshalImporter(val values.Value) (s *Importer, err error) {
	s = cmpl.Factory.NewImporter()
	var ok bool
	s.value, ok = val.(*values.Struct)
	if !ok {
		err = fmt.Errorf("cannot use handle to set Importer: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, s.value.StructType().NumFields())
	for i := range fields {
		fields[i] = s.value.FieldValue(i)
	}
	var field0 *gxdep0.Basic
	field0, err = cmpl.gxdep0.MarshalBasic(fields[0])
	if err != nil {
		return
	}
	s.Basic = field0
	return
}

func (s Importer) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Importer) Bridge() types.Bridge { return &s.handle }

// Add returns a handle to compile method Add for a device.
func (s Importer) Add() *MethodImporterAdd {
	return s.handle.runnerAdd
}

type methodBase struct {
	compiler *Compiler
	function *ir.FuncDecl
	runner   *state.CompiledGraph
}

// NewBasic compiles and runs the GX function NewBasic for a device.
// NewBasic returns a new basic structure.
type NewBasic struct {
	methodBase
}

// NewImporter compiles and runs the GX function NewImporter for a device.
// NewImported returns a new Imported structure.
type NewImporter struct {
	methodBase
}

// ReturnFromBasic compiles and runs the GX function ReturnFromBasic for a device.
// ReturnFromBasic returns a float from the basic package.
type ReturnFromBasic struct {
	methodBase
}

// Run first compiles NewBasic for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *NewBasic) Run() (_ *gxdep0.Basic, err error) {
	var args []values.Value = nil
	if f.runner == nil {
		f.runner, err = f.compiler.Package.Runtime.Compile(f.compiler.Device, f.function, nil, args, f.compiler.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.compiler.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.compiler
	var out0 *gxdep0.Basic
	out0, err = cmpl.gxdep0.MarshalBasic(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// Run first compiles NewImporter for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *NewImporter) Run() (_ *Importer, err error) {
	var args []values.Value = nil
	if f.runner == nil {
		f.runner, err = f.compiler.Package.Runtime.Compile(f.compiler.Device, f.function, nil, args, f.compiler.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.compiler.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.compiler
	var out0 *Importer
	out0, err = cmpl.MarshalImporter(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// Run first compiles ReturnFromBasic for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *ReturnFromBasic) Run() (_ types.Atom[float32], err error) {
	var args []values.Value = nil
	if f.runner == nil {
		f.runner, err = f.compiler.Package.Runtime.Compile(f.compiler.Device, f.function, nil, args, f.compiler.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.compiler.Package.Tracer)
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[float32](out0Value)

	return out0, nil
}

// NewImporter returns a handle on named type Importer.
func (fac *Factory) NewImporter() *Importer {
	s := &Importer{}
	typ := fac.Compiler.Package.IR.Types[0]
	s.handle = handleImporter{
		compiler: fac.Compiler,
		struc:    typ,
		owner:    s,
	}

	var err error
	s.value, err = values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}

	s.handle.runnerAdd = &MethodImporterAdd{
		methodBase: s.handle.compiler.methodImporterAdd,
		receiver:   s.handle,
	}

	return s
}

var _ types.Bridge = (*handleImporter)(nil)

func (h *handleImporter) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	case "Basic":
		return h.compiler.gxdep0.Factory.NewBasic().Bridge(), nil

	default:
		return nil, errors.Errorf("structure Importer has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleImporter) SetField(field *ir.Field, val types.Bridge) error {
	name := field.Name.Name
	switch name {

	case "Basic":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(*gxdep0.Basic)
		if !ok {
			return errors.Errorf("cannot set field Basic: cannot cast %T to *gxdep0.Basic", bridger)
		}
		h.owner.Basic = fieldValue
		h.owner.value.SetField(field.ID, val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Importer has no field %q", name)
	}
}
