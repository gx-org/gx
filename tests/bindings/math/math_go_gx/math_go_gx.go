// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package math_go_gx are Go bindings to the GX package:
// github.com/gx-org/gx/tests/bindings/math.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package math_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/gx-org/gx/interp"
	"github.com/gx-org/gx/interp/state"
	_ "github.com/gx-org/gx/tests/bindings/math"
	"github.com/pkg/errors"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
)

// PackageIR is the GX package intermediate representation
// built for a given runtime, but not yet for a specific device.
type PackageIR struct {
	Runtime *api.Runtime
	IR      *ir.Package
	Tracer  state.Tracer
}

// Load the GX package for a given backend.
func Load(rtm *api.Runtime) (*PackageIR, error) {
	bpkg, err := rtm.Builder().Build("github.com/gx-org/gx/tests/bindings/math")
	if err != nil {
		return nil, err
	}
	pkg := &PackageIR{
		Runtime: rtm,
		IR:      bpkg.IR(),
	}

	return pkg, nil
}

// BuildFor loads the GX package github.com/gx-org/gx/tests/bindings/math
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, options ...interp.PackageOptionFactory) (*Package, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return pkg.BuildFor(dev, options...), nil
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	Package *PackageIR
	Device  *api.Device
	Factory *Factory

	options []interp.PackageOption

	ReturnMaxFloat32 ReturnMaxFloat32
	ReturnMaxFloat64 ReturnMaxFloat64
}

// AppendOptions appends options to the compiler.
func (cmpl *Package) AppendOptions(options ...interp.PackageOptionFactory) {
	plat := cmpl.Package.Runtime.Backend().Platform()
	for _, opt := range options {
		cmpl.options = append(cmpl.options, opt(plat))
	}
}

// BuildFor returns a package ready to compile for a device and options.
func (pkg *PackageIR) BuildFor(dev *api.Device, options ...interp.PackageOptionFactory) *Package {
	c := &Package{
		Package: pkg,
		Device:  dev,
	}
	c.Factory = &Factory{Package: c}
	c.AppendOptions(options...)

	c.ReturnMaxFloat32 = ReturnMaxFloat32{
		methodBase: methodBase{
			pkg:      c,
			function: c.Package.IR.Funcs[0].(*ir.FuncDecl),
		},
	}
	c.ReturnMaxFloat64 = ReturnMaxFloat64{
		methodBase: methodBase{
			pkg:      c,
			function: c.Package.IR.Funcs[1].(*ir.FuncDecl),
		},
	}

	return c
}

type methodBase struct {
	pkg      *Package
	function ir.Func
	runner   *state.CompiledGraph
}

// ReturnMaxFloat32 compiles and runs the GX function ReturnMaxFloat32 for a device.
// ReturnMaxFloat32 returns the maximum float32.
type ReturnMaxFloat32 struct {
	methodBase
}

// ReturnMaxFloat64 compiles and runs the GX function ReturnMaxFloat64 for a device.
// ReturnMaxFloat64 returns the maximum float64.
type ReturnMaxFloat64 struct {
	methodBase
}

// Run first compiles ReturnMaxFloat32 for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *ReturnMaxFloat32) Run() (_ types.Atom[float32], err error) {
	var args []values.Value = nil
	if f.runner == nil {
		f.runner, err = interp.Compile(f.pkg.Device, f.function.(*ir.FuncDecl), nil, args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[float32](out0Value)

	return out0, nil
}

// Run first compiles ReturnMaxFloat64 for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *ReturnMaxFloat64) Run() (_ types.Atom[float64], err error) {
	var args []values.Value = nil
	if f.runner == nil {
		f.runner, err = interp.Compile(f.pkg.Device, f.function.(*ir.FuncDecl), nil, args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[float64](out0Value)

	return out0, nil
}
