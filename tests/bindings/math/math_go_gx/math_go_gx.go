// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package math_go_gx are Go bindings to the GX package:
// github.com/gx-org/gx/tests/bindings/math.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package math_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/options"
	"github.com/gx-org/gx/api/tracer"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/core"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/pkg/errors"

	_ "github.com/gx-org/gx/tests/bindings/math"

	gxdep0 "github.com/gx-org/gx/stdlib/bindings/go/math_go_gx"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
	_ = ir.NamedType{}
	_ = tracer.Trace
)

// Load the package for a given runtime.
func Load(rtm *api.Runtime) (*core.Package, error) {
	bpkg, err := rtm.Builder().Build("github.com/gx-org/gx/tests/bindings/math")
	if err != nil {
		return nil, err
	}
	deps := make([]*core.Package, 1)
	deps[0], err = gxdep0.Load(rtm)
	if err != nil {
		return nil, err
	}
	return core.NewPackage(bpkg, deps), nil
}

// BuildFor loads the GX package github.com/gx-org/gx/tests/bindings/math
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, opts ...options.PackageOptionFactory) (*Package, error) {
	pkgHandle, err := BuildHandleFor(dev, opts...)
	if err != nil {
		return nil, err
	}
	return pkgHandle.Factory.Package, nil
}

// BuildHandleFor loads the GX package github.com/gx-org/gx/tests/bindings/math
// then returns that package for a given device and options.
func BuildHandleFor(dev *api.Device, opts ...options.PackageOptionFactory) (*PackageHandle, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return BuildFromIR(pkg, dev, opts)
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// PackageHandle provides utility functions for the package.
type PackageHandle struct {
	*core.PackageCompileSetup
	Factory *Factory

	// Package dependencies
	gxdep0 *gxdep0.PackageHandle
}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	handle PackageHandle

	// Functions and methods cache
	cacheReturnMaxFloat32 *core.FuncCache
	cacheReturnMaxFloat64 *core.FuncCache
}

// BuildFromIR builds a package for a device once it has been loaded.
func BuildFromIR(irPkg *core.Package, dev *api.Device, optionFactories []options.PackageOptionFactory) (*PackageHandle, error) {
	pkg := &Package{}
	pkg.handle.Factory = &Factory{Package: pkg}
	pkg.handle.PackageCompileSetup = irPkg.Setup(dev, optionFactories)
	// Build dependencies.
	var err error
	pkg.handle.gxdep0, err = core.BuildDep[*gxdep0.PackageHandle](
		pkg.handle.PackageCompileSetup,
		0,
		gxdep0.BuildFromIR,
	)
	if err != nil {
		return nil, err
	}

	// Initialise function and method caches.
	pkg.cacheReturnMaxFloat32, err = pkg.handle.NewCache("", "ReturnMaxFloat32")
	if err != nil {
		return nil, err
	}
	pkg.cacheReturnMaxFloat64, err = pkg.handle.NewCache("", "ReturnMaxFloat64")
	if err != nil {
		return nil, err
	}

	return &pkg.handle, err
}

// ReturnMaxFloat32 returns the maximum float32.
func (pkg *Package) ReturnMaxFloat32() (_ types.Atom[float32], err error) {
	var args []values.Value = nil
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheReturnMaxFloat32.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[float32](out0Value)

	return out0, nil
}

// ReturnMaxFloat64 returns the maximum float64.
func (pkg *Package) ReturnMaxFloat64() (_ types.Atom[float64], err error) {
	var args []values.Value = nil
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheReturnMaxFloat64.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[float64](out0Value)

	return out0, nil
}
