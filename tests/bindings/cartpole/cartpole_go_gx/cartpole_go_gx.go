// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package cartpole_go_gx are Go bindings to the GX package:
// github.com/gx-org/gx/tests/bindings/cartpole.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package cartpole_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/options"
	"github.com/gx-org/gx/api/tracer"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/core"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/pkg/errors"

	_ "github.com/gx-org/gx/tests/bindings/cartpole"

	gxdep0 "github.com/gx-org/gx/stdlib/bindings/go/math_go_gx"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
	_ = ir.NamedType{}
	_ = tracer.Trace
)

// Load the package for a given runtime.
func Load(rtm *api.Runtime) (*core.Package, error) {
	bpkg, err := rtm.Builder().Build("github.com/gx-org/gx/tests/bindings/cartpole")
	if err != nil {
		return nil, err
	}
	deps := make([]*core.Package, 1)
	deps[0], err = gxdep0.Load(rtm)
	if err != nil {
		return nil, err
	}
	return core.NewPackage(bpkg, deps), nil
}

// BuildFor loads the GX package github.com/gx-org/gx/tests/bindings/cartpole
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, opts ...options.PackageOptionFactory) (*Package, error) {
	pkgHandle, err := BuildHandleFor(dev, opts...)
	if err != nil {
		return nil, err
	}
	return pkgHandle.Factory.Package, nil
}

// BuildHandleFor loads the GX package github.com/gx-org/gx/tests/bindings/cartpole
// then returns that package for a given device and options.
func BuildHandleFor(dev *api.Device, opts ...options.PackageOptionFactory) (*PackageHandle, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return BuildFromIR(pkg, dev, opts)
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// PackageHandle provides utility functions for the package.
type PackageHandle struct {
	*core.PackageCompileSetup
	Factory *Factory

	// Package dependencies
	gxdep0 *gxdep0.PackageHandle
}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	handle PackageHandle

	// Functions and methods cache
	cacheCartpoleReset     *core.FuncCache
	cacheCartpoleStep      *core.FuncCache
	cacheCartpoleState     *core.FuncCache
	cacheCartpoleFullState *core.FuncCache
	cacheNew               *core.FuncCache
}

// BuildFromIR builds a package for a device once it has been loaded.
func BuildFromIR(irPkg *core.Package, dev *api.Device, optionFactories []options.PackageOptionFactory) (*PackageHandle, error) {
	pkg := &Package{}
	pkg.handle.Factory = &Factory{Package: pkg}
	pkg.handle.PackageCompileSetup = irPkg.Setup(dev, optionFactories)
	// Build dependencies.
	var err error
	pkg.handle.gxdep0, err = core.BuildDep[*gxdep0.PackageHandle](
		pkg.handle.PackageCompileSetup,
		0,
		gxdep0.BuildFromIR,
	)
	if err != nil {
		return nil, err
	}

	// Initialise function and method caches.
	pkg.cacheCartpoleReset, err = pkg.handle.NewCache("Cartpole", "Reset")
	if err != nil {
		return nil, err
	}
	pkg.cacheCartpoleStep, err = pkg.handle.NewCache("Cartpole", "Step")
	if err != nil {
		return nil, err
	}
	pkg.cacheCartpoleState, err = pkg.handle.NewCache("Cartpole", "State")
	if err != nil {
		return nil, err
	}
	pkg.cacheCartpoleFullState, err = pkg.handle.NewCache("Cartpole", "FullState")
	if err != nil {
		return nil, err
	}
	pkg.cacheNew, err = pkg.handle.NewCache("", "New")
	if err != nil {
		return nil, err
	}

	return &pkg.handle, err
}

func (pkg *Package) New() (_ *Cartpole, err error) {
	var args []values.Value = nil
	var runner tracer.CompiledFunc
	runner, err = pkg.cacheNew.Runner(nil, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(nil, args, pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := pkg.handle.Factory

	var out0 *Cartpole
	out0, err = fty.MarshalCartpole(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// handleCartpole stores the backend handles of Cartpole.
type handleCartpole struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Cartpole
}

// Type of the value.
func (h *handleCartpole) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleCartpole) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleCartpole) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleCartpole) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleCartpole) String() string {
	bld := strings.Builder{}
	bld.WriteString("Cartpole{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "gravity", any(h.owner.gravity).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "massCart", any(h.owner.massCart).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "massPole", any(h.owner.massPole).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "totalMass", any(h.owner.totalMass).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "length", any(h.owner.length).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "poleMassLength", any(h.owner.poleMassLength).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "forceMag", any(h.owner.forceMag).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "tau", any(h.owner.tau).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "thetaThresholdRadians", any(h.owner.thetaThresholdRadians).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "xThreshold", any(h.owner.xThreshold).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "x", any(h.owner.x).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "xDot", any(h.owner.xDot).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "theta", any(h.owner.theta).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "thetaDot", any(h.owner.thetaDot).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// Cartpole stores the handle of Cartpole on a device.
type Cartpole struct {
	handle handleCartpole
	value  *values.NamedType

	gravity               types.Atom[float32]
	massCart              types.Atom[float32]
	massPole              types.Atom[float32]
	totalMass             types.Atom[float32]
	length                types.Atom[float32]
	poleMassLength        types.Atom[float32]
	forceMag              types.Atom[float32]
	tau                   types.Atom[float32]
	thetaThresholdRadians types.Atom[float32]
	xThreshold            types.Atom[float32]
	x                     types.Atom[float32]
	xDot                  types.Atom[float32]
	theta                 types.Atom[float32]
	thetaDot              types.Atom[float32]
}

var (
	_ types.Bridger      = (*Cartpole)(nil)
	_ types.StructBridge = (*handleCartpole)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleCartpole) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalCartpole populates the receiver fields with device handles.
func (fty *Factory) MarshalCartpole(val values.Value) (s *Cartpole, err error) {
	s = fty.NewCartpole()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set Cartpole: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type Cartpole: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewAtom[float32](field0Value)

	field1Value, ok := fields[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field1 := types.NewAtom[float32](field1Value)

	field2Value, ok := fields[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field2 := types.NewAtom[float32](field2Value)

	field3Value, ok := fields[3].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[3], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field3 := types.NewAtom[float32](field3Value)

	field4Value, ok := fields[4].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[4], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field4 := types.NewAtom[float32](field4Value)

	field5Value, ok := fields[5].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[5], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field5 := types.NewAtom[float32](field5Value)

	field6Value, ok := fields[6].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[6], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field6 := types.NewAtom[float32](field6Value)

	field7Value, ok := fields[7].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[7], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field7 := types.NewAtom[float32](field7Value)

	field8Value, ok := fields[8].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[8], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field8 := types.NewAtom[float32](field8Value)

	field9Value, ok := fields[9].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[9], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field9 := types.NewAtom[float32](field9Value)

	field10Value, ok := fields[10].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[10], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field10 := types.NewAtom[float32](field10Value)

	field11Value, ok := fields[11].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[11], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field11 := types.NewAtom[float32](field11Value)

	field12Value, ok := fields[12].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[12], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field12 := types.NewAtom[float32](field12Value)

	field13Value, ok := fields[13].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[13], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field13 := types.NewAtom[float32](field13Value)

	s.gravity = field0
	s.massCart = field1
	s.massPole = field2
	s.totalMass = field3
	s.length = field4
	s.poleMassLength = field5
	s.forceMag = field6
	s.tau = field7
	s.thetaThresholdRadians = field8
	s.xThreshold = field9
	s.x = field10
	s.xDot = field11
	s.theta = field12
	s.thetaDot = field13
	return
}

func (s Cartpole) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Cartpole) Bridge() types.Bridge { return &s.handle }

// NewCartpole returns a handle on named type Cartpole.
func (fac *Factory) NewCartpole() *Cartpole {
	s := &Cartpole{}
	typ := fac.Package.handle.IR().Decls.TypeByName("Cartpole")
	s.handle = handleCartpole{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleCartpole)(nil)

func (h *handleCartpole) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {
	case "gravity":
		return nil, errors.Errorf("cannot create a new instance for field gravity: type types.Atom[float32] not supported")
	case "massCart":
		return nil, errors.Errorf("cannot create a new instance for field massCart: type types.Atom[float32] not supported")
	case "massPole":
		return nil, errors.Errorf("cannot create a new instance for field massPole: type types.Atom[float32] not supported")
	case "totalMass":
		return nil, errors.Errorf("cannot create a new instance for field totalMass: type types.Atom[float32] not supported")
	case "length":
		return nil, errors.Errorf("cannot create a new instance for field length: type types.Atom[float32] not supported")
	case "poleMassLength":
		return nil, errors.Errorf("cannot create a new instance for field poleMassLength: type types.Atom[float32] not supported")
	case "forceMag":
		return nil, errors.Errorf("cannot create a new instance for field forceMag: type types.Atom[float32] not supported")
	case "tau":
		return nil, errors.Errorf("cannot create a new instance for field tau: type types.Atom[float32] not supported")
	case "thetaThresholdRadians":
		return nil, errors.Errorf("cannot create a new instance for field thetaThresholdRadians: type types.Atom[float32] not supported")
	case "xThreshold":
		return nil, errors.Errorf("cannot create a new instance for field xThreshold: type types.Atom[float32] not supported")
	case "x":
		return nil, errors.Errorf("cannot create a new instance for field x: type types.Atom[float32] not supported")
	case "xDot":
		return nil, errors.Errorf("cannot create a new instance for field xDot: type types.Atom[float32] not supported")
	case "theta":
		return nil, errors.Errorf("cannot create a new instance for field theta: type types.Atom[float32] not supported")
	case "thetaDot":
		return nil, errors.Errorf("cannot create a new instance for field thetaDot: type types.Atom[float32] not supported")

	default:
		return nil, errors.Errorf("structure Cartpole has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleCartpole) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type Cartpole: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "gravity":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field gravity: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.gravity = fieldValue
		structVal.SetField("gravity", val.GXValue())
		return nil

	case "massCart":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field massCart: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.massCart = fieldValue
		structVal.SetField("massCart", val.GXValue())
		return nil

	case "massPole":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field massPole: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.massPole = fieldValue
		structVal.SetField("massPole", val.GXValue())
		return nil

	case "totalMass":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field totalMass: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.totalMass = fieldValue
		structVal.SetField("totalMass", val.GXValue())
		return nil

	case "length":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field length: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.length = fieldValue
		structVal.SetField("length", val.GXValue())
		return nil

	case "poleMassLength":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field poleMassLength: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.poleMassLength = fieldValue
		structVal.SetField("poleMassLength", val.GXValue())
		return nil

	case "forceMag":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field forceMag: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.forceMag = fieldValue
		structVal.SetField("forceMag", val.GXValue())
		return nil

	case "tau":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field tau: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.tau = fieldValue
		structVal.SetField("tau", val.GXValue())
		return nil

	case "thetaThresholdRadians":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field thetaThresholdRadians: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.thetaThresholdRadians = fieldValue
		structVal.SetField("thetaThresholdRadians", val.GXValue())
		return nil

	case "xThreshold":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field xThreshold: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.xThreshold = fieldValue
		structVal.SetField("xThreshold", val.GXValue())
		return nil

	case "x":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field x: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.x = fieldValue
		structVal.SetField("x", val.GXValue())
		return nil

	case "xDot":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field xDot: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.xDot = fieldValue
		structVal.SetField("xDot", val.GXValue())
		return nil

	case "theta":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field theta: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.theta = fieldValue
		structVal.SetField("theta", val.GXValue())
		return nil

	case "thetaDot":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field thetaDot: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.thetaDot = fieldValue
		structVal.SetField("thetaDot", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Cartpole has no field %q", name)
	}

}

func (recv *Cartpole) Reset() (_ *Cartpole, err error) {
	var args []values.Value = nil
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheCartpoleReset.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *Cartpole
	out0, err = fty.MarshalCartpole(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

func (recv *Cartpole) Step(arg0 types.Atom[float32]) (_ *Cartpole, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // action float32
	}
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheCartpoleStep.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	fty := recv.handle.pkg.handle.Factory

	var out0 *Cartpole
	out0, err = fty.MarshalCartpole(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

func (recv *Cartpole) State() (_ types.Array[float32], err error) {
	var args []values.Value = nil
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheCartpoleState.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[float32](out0Value)

	return out0, nil
}

func (recv *Cartpole) FullState() (_ types.Array[float32], err error) {
	var args []values.Value = nil
	var runner tracer.CompiledFunc
	runner, err = recv.handle.pkg.cacheCartpoleFullState.Runner(recv.value, args)
	if err != nil {
		return
	}
	var outputs []values.Value
	outputs, err = runner.Run(recv.value, args, recv.handle.pkg.handle.Tracer())
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[float32](out0Value)

	return out0, nil
}
