// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package rand_go_gx are Go bindings to the GX package:
// github.com/gx-org/gx/tests/bindings/rand.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package rand_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	"github.com/gx-org/gx/interp"
	"github.com/gx-org/gx/interp/state"
	_ "github.com/gx-org/gx/tests/bindings"
	"github.com/pkg/errors"

	gxdep0 "github.com/gx-org/gx/stdlib/bindings/go/rand_go_gx"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
)

// Package is the GX package built for a given backend.
type Package struct {
	Runtime *api.Runtime
	IR      *ir.Package
	Tracer  state.Tracer

	gxdep0 *gxdep0.Package
}

// Load the GX package for a given backend.
func Load(rtm *api.Runtime) (*Package, error) {
	irPackage, err := rtm.Builder().Build("github.com/gx-org/gx/tests/bindings/rand")
	if err != nil {
		return nil, err
	}
	pkg := &Package{
		Runtime: rtm,
		IR:      irPackage,
	}

	if pkg.gxdep0, err = gxdep0.Load(rtm); err != nil {
		return nil, err
	}

	return pkg, nil
}

// CompilerFor loads the GX package github.com/gx-org/gx/tests/bindings/rand
// then returns the compiler for a given device and options.
func CompilerFor(rtm *api.Runtime, dev platform.Device, options ...interp.PackageOptionFactory) (*Compiler, error) {
	pkg, err := Load(rtm)
	if err != nil {
		return nil, err
	}
	return pkg.CompilerFor(dev, options...), nil
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Compiler *Compiler
}

// Compiler compiles GX functions for a given device.
type Compiler struct {
	Package *Package
	Device  platform.Device
	Factory *Factory

	options []interp.PackageOption

	gxdep0 *gxdep0.Compiler

	New    New
	Sample Sample
}

// AppendOptions appends options to the compiler.
func (cmpl *Compiler) AppendOptions(options ...interp.PackageOptionFactory) {
	plat := cmpl.Package.Runtime.Platform()
	for _, opt := range options {
		cmpl.options = append(cmpl.options, opt(plat))
	}
}

// CompilerFor returns a compiler for a device and options.
func (pkg *Package) CompilerFor(dev platform.Device, options ...interp.PackageOptionFactory) *Compiler {
	c := &Compiler{
		Package: pkg,
		Device:  dev,
	}
	c.Factory = &Factory{Compiler: c}
	c.AppendOptions(options...)

	c.New = New{
		methodBase: methodBase{
			compiler: c,
			function: c.Package.IR.Funcs[0].(*ir.FuncDecl),
		},
	}
	c.Sample = Sample{
		methodBase: methodBase{
			compiler: c,
			function: c.Package.IR.Funcs[1].(*ir.FuncDecl),
		},
	}

	c.gxdep0 = c.Package.gxdep0.CompilerFor(dev, options...)

	return c
}

type methodBase struct {
	compiler *Compiler
	function *ir.FuncDecl
	runner   *state.CompiledGraph
}

// New compiles and runs the GX function New for a device.
// New returns a new Rand instance given a seed.
type New struct {
	methodBase
}

// Sample compiles and runs the GX function Sample for a device.
// Sample the first few numbers from a number generator.
type Sample struct {
	methodBase
}

// Run first compiles New for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *New) Run(arg0 types.Atom[int64]) (_ *gxdep0.Rand, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // seed int64
	}
	if f.runner == nil {
		f.runner, err = f.compiler.Package.Runtime.Compile(f.compiler.Device, f.function, nil, args, f.compiler.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.compiler.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.compiler
	var out0 *gxdep0.Rand
	out0, err = cmpl.gxdep0.MarshalRand(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

// Run first compiles Sample for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *Sample) Run(arg0 types.Atom[int64]) (_ types.Array[float32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // seed int64
	}
	if f.runner == nil {
		f.runner, err = f.compiler.Package.Runtime.Compile(f.compiler.Device, f.function, nil, args, f.compiler.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.compiler.Package.Tracer)
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[float32](out0Value)

	return out0, nil
}
