// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package basic_go_gx are Go bindings to the GX package:
// github.com/gx-org/gx/tests/bindings/basic.
//
// Automatically generated by
// gx/golang/binder/gobindings/bindings.go.tmpl.
package basic_go_gx

import (
	"fmt"
	"reflect"
	"strings"

	"github.com/gx-org/backend/platform"
	"github.com/gx-org/gx/api"
	"github.com/gx-org/gx/api/options"
	"github.com/gx-org/gx/api/trace"
	"github.com/gx-org/gx/api/tracer"
	"github.com/gx-org/gx/api/values"
	"github.com/gx-org/gx/build/ir"
	"github.com/gx-org/gx/golang/binder/gobindings/types"
	_ "github.com/gx-org/gx/tests/bindings/basic"
	"github.com/pkg/errors"
)

// Force some package dependencies.
var (
	_ = fmt.Println
	_ = strings.Compare
	_ = reflect.TypeFor[int]
	_ = values.Struct{}
	_ = errors.Errorf
	_ = types.NewSlice[types.Bridger]
	_ = platform.HostTransfer
)

// PackageIR is the GX package intermediate representation
// built for a given runtime, but not yet for a specific device.
type PackageIR struct {
	Runtime *api.Runtime
	IR      *ir.Package
	Tracer  trace.Callback
}

// Load the GX package for a given backend.
func Load(rtm *api.Runtime) (*PackageIR, error) {
	bpkg, err := rtm.Builder().Build("github.com/gx-org/gx/tests/bindings/basic")
	if err != nil {
		return nil, err
	}
	pkg := &PackageIR{
		Runtime: rtm,
		IR:      bpkg.IR(),
	}

	return pkg, nil
}

// BuildFor loads the GX package github.com/gx-org/gx/tests/bindings/basic
// then returns that package for a given device and options.
func BuildFor(dev *api.Device, options ...options.PackageOptionFactory) (*Package, error) {
	pkg, err := Load(dev.Runtime())
	if err != nil {
		return nil, err
	}
	return pkg.BuildFor(dev, options...), nil
}

// Factory create new instance of types used in the package.
// The compiler associated with the factory defines on what
// device and with which options methods of the instances
// created by the factory are compiled for.
type Factory struct {
	Package *Package
}

// Package is a GX package for a given device.
// Functions and methods are compiled specifically for that device.
type Package struct {
	Package *PackageIR
	Device  *api.Device
	Factory *Factory

	options []options.PackageOption

	ReturnFloat32         ReturnFloat32
	ReturnArrayFloat32    ReturnArrayFloat32
	ReturnMultiple        ReturnMultiple
	New                   New
	AddPrivate            AddPrivate
	methodBasicAddPrivate methodBase
	methodBasicSetFloat   methodBase
}

// AppendOptions appends options to the compiler.
func (cmpl *Package) AppendOptions(options ...options.PackageOptionFactory) {
	plat := cmpl.Package.Runtime.Backend().Platform()
	for _, opt := range options {
		cmpl.options = append(cmpl.options, opt(plat))
	}
}

// BuildFor returns a package ready to compile for a device and options.
func (pkg *PackageIR) BuildFor(dev *api.Device, options ...options.PackageOptionFactory) *Package {
	c := &Package{
		Package: pkg,
		Device:  dev,
	}
	c.Factory = &Factory{Package: c}
	c.AppendOptions(options...)

	c.ReturnFloat32 = ReturnFloat32{
		methodBase: methodBase{
			pkg:      c,
			function: c.Package.IR.Decls.Funcs[0],
		},
	}
	c.ReturnArrayFloat32 = ReturnArrayFloat32{
		methodBase: methodBase{
			pkg:      c,
			function: c.Package.IR.Decls.Funcs[1],
		},
	}
	c.ReturnMultiple = ReturnMultiple{
		methodBase: methodBase{
			pkg:      c,
			function: c.Package.IR.Decls.Funcs[2],
		},
	}
	c.New = New{
		methodBase: methodBase{
			pkg:      c,
			function: c.Package.IR.Decls.Funcs[3],
		},
	}
	c.AddPrivate = AddPrivate{
		methodBase: methodBase{
			pkg:      c,
			function: c.Package.IR.Decls.Funcs[4],
		},
	}

	c.methodBasicAddPrivate = methodBase{
		pkg:      c,
		function: c.Package.IR.Decls.Types[1].Methods[0],
	}
	c.methodBasicSetFloat = methodBase{
		pkg:      c,
		function: c.Package.IR.Decls.Types[1].Methods[1],
	}

	return c
}

// handleEmpty stores the backend handles of Empty.
type handleEmpty struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Empty
}

// Type of the value.
func (h *handleEmpty) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleEmpty) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleEmpty) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleEmpty) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleEmpty) String() string {
	bld := strings.Builder{}
	bld.WriteString("Empty{\n")

	bld.WriteString("}")
	return bld.String()
}

// Empty stores the handle of Empty on a device.
type Empty struct {
	handle handleEmpty
	value  *values.NamedType
}

var (
	_ types.Bridger      = (*Empty)(nil)
	_ types.StructBridge = (*handleEmpty)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleEmpty) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalEmpty populates the receiver fields with device handles.
func (cmpl *Package) MarshalEmpty(val values.Value) (s *Empty, err error) {
	s = cmpl.Factory.NewEmpty()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set Empty: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type Empty: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	return
}

func (s Empty) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Empty) Bridge() types.Bridge { return &s.handle }

// handleBasic stores the backend handles of Basic.
type handleBasic struct {
	pkg   *Package
	struc *ir.NamedType
	owner *Basic

	runnerAddPrivate *MethodBasicAddPrivate

	runnerSetFloat *MethodBasicSetFloat
}

// MethodBasicAddPrivate compiles and runs the GX function AddPrivate for a device.
// AddPrivate returns the sum of two private fields.
type MethodBasicAddPrivate struct {
	methodBase
	receiver handleBasic
}

// MethodBasicSetFloat compiles and runs the GX function SetFloat for a device.
// SetFloat sets the Float field.
type MethodBasicSetFloat struct {
	methodBase
	receiver handleBasic
}

// Run first compiles AddPrivate for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *MethodBasicAddPrivate) Run() (_ types.Atom[int32], err error) {
	var args []values.Value = nil
	if f.runner == nil {
		f.runner, err = tracer.Trace(f.pkg.Device, f.function.(*ir.FuncDecl), f.receiver.GXValue(), args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(f.receiver.GXValue(), args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[int32](out0Value)

	return out0, nil
}

func (f *MethodBasicAddPrivate) String() string {
	return fmt.Sprint(f.function)
}

// Run first compiles SetFloat for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *MethodBasicSetFloat) Run(arg0 types.Atom[float32]) (_ *Basic, err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // x float32
	}
	if f.runner == nil {
		f.runner, err = tracer.Trace(f.pkg.Device, f.function.(*ir.FuncDecl), f.receiver.GXValue(), args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(f.receiver.GXValue(), args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.pkg
	var out0 *Basic
	out0, err = cmpl.MarshalBasic(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

func (f *MethodBasicSetFloat) String() string {
	return fmt.Sprint(f.function)
}

// Type of the value.
func (h *handleBasic) Type() ir.Type {
	return h.struc
}

// NamedType returns the intermediate representation of the type.
func (h *handleBasic) NamedType() *ir.NamedType {
	return h.struc
}

// Bridger returns the Go object owning this handle.
func (h *handleBasic) Bridger() types.Bridger {
	return h.owner
}

// GXValue returns the GX value.
func (h *handleBasic) GXValue() values.Value {
	return h.owner.value
}

// String representation of the handle.
func (h *handleBasic) String() string {
	bld := strings.Builder{}
	bld.WriteString("Basic{\n")

	fmt.Fprintf(&bld, "%s:%s\n", "Int", any(h.owner.Int).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "Float", any(h.owner.Float).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "Array", any(h.owner.Array).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "privateA", any(h.owner.privateA).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "privateB", any(h.owner.privateB).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "length", any(h.owner.length).(fmt.Stringer).String())

	fmt.Fprintf(&bld, "%s:%s\n", "index", any(h.owner.index).(fmt.Stringer).String())

	bld.WriteString("}")
	return bld.String()
}

// Basic stores the handle of Basic on a device.
type Basic struct {
	handle handleBasic
	value  *values.NamedType

	Int types.Atom[int32]

	Float types.Atom[float32]

	Array types.Array[float32]

	privateA types.Atom[int32]

	privateB types.Atom[int32]

	length types.Atom[ir.Int]

	index types.Atom[ir.Int]
}

var (
	_ types.Bridger      = (*Basic)(nil)
	_ types.StructBridge = (*handleBasic)(nil)
)

// StructValue returns the GX value of the structure.
func (h *handleBasic) StructValue() *values.Struct {
	return h.owner.value.Underlying().(*values.Struct)
}

// MarshalBasic populates the receiver fields with device handles.
func (cmpl *Package) MarshalBasic(val values.Value) (s *Basic, err error) {
	s = cmpl.Factory.NewBasic()
	var ok bool
	s.value, ok = val.(*values.NamedType)
	if !ok {
		err = errors.Errorf("cannot use handle to set Basic: %T is not a %s", val, reflect.TypeFor[*values.NamedType]())
		return
	}
	structVal, ok := s.value.Underlying().(*values.Struct)
	if !ok {
		err = errors.Errorf("incorrect underlying value for named type Basic: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
		return
	}
	fields := make([]values.Value, structVal.StructType().NumFields())
	for i, field := range structVal.StructType().Fields.Fields() {
		fields[i] = structVal.FieldValue(field.Name.Name)
	}

	field0Value, ok := fields[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field0 := types.NewAtom[int32](field0Value)

	field1Value, ok := fields[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field1 := types.NewAtom[float32](field1Value)

	field2Value, ok := fields[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field2 := types.NewArray[float32](field2Value)

	field3Value, ok := fields[3].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[3], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field3 := types.NewAtom[int32](field3Value)

	field4Value, ok := fields[4].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[4], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field4 := types.NewAtom[int32](field4Value)

	field5Value, ok := fields[5].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[5], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field5 := types.NewAtom[ir.Int](field5Value)

	field6Value, ok := fields[6].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", fields[6], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	field6 := types.NewAtom[ir.Int](field6Value)

	s.Int = field0
	s.Float = field1
	s.Array = field2
	s.privateA = field3
	s.privateB = field4
	s.length = field5
	s.index = field6
	return
}

func (s Basic) String() string {
	return s.handle.String()
}

// Bridge returns the bridge between the Go value and the GX value.
func (s *Basic) Bridge() types.Bridge { return &s.handle }

// AddPrivate returns a handle to compile method AddPrivate for a device.
func (s Basic) AddPrivate() *MethodBasicAddPrivate {
	return s.handle.runnerAddPrivate
}

// SetFloat returns a handle to compile method SetFloat for a device.
func (s Basic) SetFloat() *MethodBasicSetFloat {
	return s.handle.runnerSetFloat
}

type methodBase struct {
	pkg      *Package
	function ir.Func
	runner   tracer.CompiledFunc
}

// ReturnFloat32 compiles and runs the GX function ReturnFloat32 for a device.
// ReturnFloat32 returns a float32.
type ReturnFloat32 struct {
	methodBase
}

// ReturnArrayFloat32 compiles and runs the GX function ReturnArrayFloat32 for a device.
// ReturnArrayFloat32 returns a float32 tensor.
type ReturnArrayFloat32 struct {
	methodBase
}

// ReturnMultiple compiles and runs the GX function ReturnMultiple for a device.
// ReturnMultiple returns multiple values.
type ReturnMultiple struct {
	methodBase
}

// New compiles and runs the GX function New for a device.
// New returns a new instance of the basic structure.
type New struct {
	methodBase
}

// AddPrivate compiles and runs the GX function AddPrivate for a device.
// AddPrivate returns the sum of two private fields.
type AddPrivate struct {
	methodBase
}

// Run first compiles ReturnFloat32 for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *ReturnFloat32) Run() (_ types.Atom[float32], err error) {
	var args []values.Value = nil
	if f.runner == nil {
		f.runner, err = tracer.Trace(f.pkg.Device, f.function.(*ir.FuncDecl), nil, args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[float32](out0Value)

	return out0, nil
}

func (f *ReturnFloat32) String() string {
	return fmt.Sprint(f.function)
}

// Run first compiles ReturnArrayFloat32 for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *ReturnArrayFloat32) Run() (_ types.Array[float32], err error) {
	var args []values.Value = nil
	if f.runner == nil {
		f.runner, err = tracer.Trace(f.pkg.Device, f.function.(*ir.FuncDecl), nil, args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewArray[float32](out0Value)

	return out0, nil
}

func (f *ReturnArrayFloat32) String() string {
	return fmt.Sprint(f.function)
}

// Run first compiles ReturnMultiple for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *ReturnMultiple) Run() (_ types.Atom[int32], _ types.Atom[float32], _ types.Atom[float64], err error) {
	var args []values.Value = nil
	if f.runner == nil {
		f.runner, err = tracer.Trace(f.pkg.Device, f.function.(*ir.FuncDecl), nil, args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[int32](out0Value)

	out1Value, ok := outputs[1].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[1], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out1 := types.NewAtom[float32](out1Value)

	out2Value, ok := outputs[2].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[2], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out2 := types.NewAtom[float64](out2Value)

	return out0, out1, out2, nil
}

func (f *ReturnMultiple) String() string {
	return fmt.Sprint(f.function)
}

// Run first compiles New for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *New) Run() (_ *Basic, err error) {
	var args []values.Value = nil
	if f.runner == nil {
		f.runner, err = tracer.Trace(f.pkg.Device, f.function.(*ir.FuncDecl), nil, args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	cmpl := f.pkg
	var out0 *Basic
	out0, err = cmpl.MarshalBasic(outputs[0])
	if err != nil {
		return
	}

	return out0, nil
}

func (f *New) String() string {
	return fmt.Sprint(f.function)
}

// Run first compiles AddPrivate for a given device and the given arguments.
// Once compiled, the function is then run with these same arguments.
// If the shape of the arguments change, the function will panic.
func (f *AddPrivate) Run(arg0 *Basic) (_ types.Atom[int32], err error) {
	var args []values.Value = []values.Value{
		arg0.Bridge().GXValue(), // b Basic
	}
	if f.runner == nil {
		f.runner, err = tracer.Trace(f.pkg.Device, f.function.(*ir.FuncDecl), nil, args, f.pkg.options)
		if err != nil {
			return
		}
	}
	var outputs []values.Value
	outputs, err = f.runner.Run(nil, args, f.pkg.Package.Tracer)
	if err != nil {
		return
	}

	out0Value, ok := outputs[0].(values.Array)
	if !ok {
		err = errors.Errorf("cannot cast %T to %s", outputs[0], reflect.TypeFor[*values.DeviceArray]().Name())
		return
	}
	out0 := types.NewAtom[int32](out0Value)

	return out0, nil
}

func (f *AddPrivate) String() string {
	return fmt.Sprint(f.function)
}

// NewEmpty returns a handle on named type Empty.
func (fac *Factory) NewEmpty() *Empty {
	s := &Empty{}
	typ := fac.Package.Package.IR.Decls.TypeByName("Empty")
	s.handle = handleEmpty{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	return s
}

var _ types.Bridge = (*handleEmpty)(nil)

func (h *handleEmpty) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	default:
		return nil, errors.Errorf("structure Empty has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleEmpty) SetField(field *ir.Field, val types.Bridge) error {

	return errors.Errorf("type Empty has no field")

}

// NewBasic returns a handle on named type Basic.
func (fac *Factory) NewBasic() *Basic {
	s := &Basic{}
	typ := fac.Package.Package.IR.Decls.TypeByName("Basic")
	s.handle = handleBasic{
		pkg:   fac.Package,
		struc: typ,
		owner: s,
	}

	structVal, err := values.NewStruct(typ, nil)
	if err != nil {
		panic(err)
	}
	s.value = values.NewNamedType(structVal, typ)

	s.handle.runnerAddPrivate = &MethodBasicAddPrivate{
		methodBase: s.handle.pkg.methodBasicAddPrivate,
		receiver:   s.handle,
	}

	s.handle.runnerSetFloat = &MethodBasicSetFloat{
		methodBase: s.handle.pkg.methodBasicSetFloat,
		receiver:   s.handle,
	}

	return s
}

var _ types.Bridge = (*handleBasic)(nil)

func (h *handleBasic) NewFromField(field *ir.Field) (types.Bridge, error) {
	name := field.Name.Name
	switch name {

	case "Int":
		return nil, errors.Errorf("cannot create a new instance for field Int: type types.Atom[int32] not supported")

	case "Float":
		return nil, errors.Errorf("cannot create a new instance for field Float: type types.Atom[float32] not supported")

	case "Array":
		return nil, errors.Errorf("cannot create a new instance for field Array: type types.Array[float32] not supported")

	case "privateA":
		return nil, errors.Errorf("cannot create a new instance for field privateA: type types.Atom[int32] not supported")

	case "privateB":
		return nil, errors.Errorf("cannot create a new instance for field privateB: type types.Atom[int32] not supported")

	case "length":
		return nil, errors.Errorf("cannot create a new instance for field length: type types.Atom[ir.Int] not supported")

	case "index":
		return nil, errors.Errorf("cannot create a new instance for field index: type types.Atom[ir.Int] not supported")

	default:
		return nil, errors.Errorf("structure Basic has no field %q", name)
	}
}

// SetField sets a field in the structure.
func (h *handleBasic) SetField(field *ir.Field, val types.Bridge) error {

	name := field.Name.Name
	structVal, ok := h.owner.value.Underlying().(*values.Struct)
	if !ok {
		return fmt.Errorf("incorrect underlying value for named type Basic: %T is not a %s", val, reflect.TypeFor[*values.Struct]().Name())
	}
	switch name {

	case "Int":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[int32])
		if !ok {
			return errors.Errorf("cannot set field Int: cannot cast %T to types.Atom[int32]", bridger)
		}
		h.owner.Int = fieldValue
		structVal.SetField("Int", val.GXValue())
		return nil

	case "Float":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[float32])
		if !ok {
			return errors.Errorf("cannot set field Float: cannot cast %T to types.Atom[float32]", bridger)
		}
		h.owner.Float = fieldValue
		structVal.SetField("Float", val.GXValue())
		return nil

	case "Array":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Array[float32])
		if !ok {
			return errors.Errorf("cannot set field Array: cannot cast %T to types.Array[float32]", bridger)
		}
		h.owner.Array = fieldValue
		structVal.SetField("Array", val.GXValue())
		return nil

	case "privateA":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[int32])
		if !ok {
			return errors.Errorf("cannot set field privateA: cannot cast %T to types.Atom[int32]", bridger)
		}
		h.owner.privateA = fieldValue
		structVal.SetField("privateA", val.GXValue())
		return nil

	case "privateB":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[int32])
		if !ok {
			return errors.Errorf("cannot set field privateB: cannot cast %T to types.Atom[int32]", bridger)
		}
		h.owner.privateB = fieldValue
		structVal.SetField("privateB", val.GXValue())
		return nil

	case "length":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[ir.Int])
		if !ok {
			return errors.Errorf("cannot set field length: cannot cast %T to types.Atom[ir.Int]", bridger)
		}
		h.owner.length = fieldValue
		structVal.SetField("length", val.GXValue())
		return nil

	case "index":
		bridger := val.Bridger()
		fieldValue, ok := bridger.(types.Atom[ir.Int])
		if !ok {
			return errors.Errorf("cannot set field index: cannot cast %T to types.Atom[ir.Int]", bridger)
		}
		h.owner.index = fieldValue
		structVal.SetField("index", val.GXValue())
		return nil

	default:
		return errors.Errorf("structure Basic has no field %q", name)
	}

}
