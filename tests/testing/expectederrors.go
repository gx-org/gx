// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package testing

import (
	"errors"
	"fmt"
	"go/ast"
	"strings"

	"github.com/gx-org/gx/build/fmterr"
	"github.com/gx-org/gx/build/ir"
)

const errorPrefix = "ERROR"

type (
	errorInspector struct {
		pkg                *ir.Package
		fileToLineToErrors map[string]map[int]fmterr.ErrorWithPos
		numExpected        int
	}
)

func newErrorInspector(pkg *ir.Package) (*errorInspector, bool) {
	ei := &errorInspector{
		pkg:                pkg,
		fileToLineToErrors: make(map[string]map[int]fmterr.ErrorWithPos),
	}
	for name, file := range pkg.Files {
		errs := make(map[int]fmterr.ErrorWithPos)
		ei.collectPackageLevelErrors(errs, file)
		ei.collectFunctionLevelErrors(errs, file)
		ei.fileToLineToErrors[name] = errs
		ei.numExpected += len(errs)
	}
	return ei, ei.numExpected > 0
}

func (ei *errorInspector) collectPackageLevelErrors(errs map[int]fmterr.ErrorWithPos, file *ir.File) {
	for _, decl := range file.Src.Decls {
		genDecl, ok := decl.(*ast.GenDecl)
		if !ok {
			continue
		}
		for _, spec := range genDecl.Specs {
			var comment *ast.CommentGroup
			switch specT := spec.(type) {
			case *ast.ValueSpec:
				comment = specT.Comment
			case *ast.TypeSpec:
				comment = specT.Comment
			case *ast.ImportSpec:
				comment = specT.Comment
			}
			ei.commentToError(errs, comment)
		}
	}
}

func (ei *errorInspector) collectFunctionLevelErrors(errs map[int]fmterr.ErrorWithPos, file *ir.File) {
	for _, cmt := range file.Src.Comments {
		ei.commentToError(errs, cmt)
	}
}

func (ei *errorInspector) commentToError(errs map[int]fmterr.ErrorWithPos, cmt *ast.CommentGroup) {
	text := strings.TrimSpace(cmt.Text())
	if !strings.HasPrefix(text, errorPrefix) {
		return
	}
	text = strings.TrimPrefix(text, errorPrefix)
	text = strings.TrimSpace(text)
	cmtPos := ei.pkg.FSet.Position(cmt.Pos())
	errs[cmtPos.Line] = fmterr.Position(
		ei.pkg.FSet,
		cmt,
		errors.New(text),
	)
}

func (ei *errorInspector) notFoundExpectedErrors() error {
	errs := fmterr.Errors{}
	for _, lineToError := range ei.fileToLineToErrors {
		for _, err := range lineToError {
			notFoundErr := err
			pos := ei.pkg.FSet.Position(err.Src().Pos())
			notFoundErr = fmterr.Position(
				ei.pkg.FSet,
				notFoundErr.Src(),
				fmt.Errorf("%s:%d: expected error not found: %s", pos.Filename, pos.Line, err.Err().Error()),
			)
			errs.Append(notFoundErr)
		}
	}
	return errs.ToError()
}

// processPackageErrors goes through all the errors of the package and
// compare them to the errors generated by the compiler.
//
// If the same error is found, it is removed from the set of errors of the package
// and from the set of expected errors.
func (ei *errorInspector) processPackageErrors(err error) error {
	errPos, ok := err.(fmterr.ErrorWithPos)
	if !ok {
		return err
	}
	pos := ei.pkg.FSet.Position(errPos.Src().Pos())
	fileErrors := ei.fileToLineToErrors[pos.Filename]
	if fileErrors == nil {
		return err
	}
	lineError, ok := fileErrors[pos.Line]
	if !ok {
		return err
	}
	// An expected error has been found on the same line.
	// We can remove it from the set of expected errors.
	delete(fileErrors, pos.Line)
	compilerText := errPos.Error()
	expectedText := lineError.Err().Error()
	// Check if the text of the generated error contains the string specified in the comments.
	if strings.Contains(compilerText, expectedText) {
		return nil
	}
	// The error is expected but does not have the correct message.
	// We transform the error to transform the report such finding.
	return fmterr.Errorf(ei.pkg.FSet, lineError.Src(), fmt.Sprintf("incorrect compiler error:\n%s\nbut want an error message that contains %q", compilerText, expectedText))
}

// CompareToExpectedErrors removes errors declared in the source code using:
// ERROR: <sub string to search in the error message>
// from a set of errors and returns the remaining errors if any.
//
// First, all expected errors are collected from the comments. Second, these errors
// are compared to the errors generated by the compiler. If some errors have been
// generated by the compiler and are not expected, an error is returned. If some
// errors are expected in the comments and have not been generated by the compiler,
// an error is returned.
func CompareToExpectedErrors(pkg *ir.Package, err error) (bool, error) {
	inspector, hasExpectedErrors := newErrorInspector(pkg)
	if err == nil {
		// If the builder generated no errors, then we return the errors that are expected.
		return hasExpectedErrors, inspector.notFoundExpectedErrors()
	}
	pkgErrs, ok := err.(*fmterr.Errors)
	if !ok {
		// If the error that has been generated is not a list of errors,
		// then an error occurred before we could build the package.
		// So, we return it.
		return hasExpectedErrors, err
	}
	if !hasExpectedErrors {
		// Errors have been generated but we do not expect any.
		// So, we return the unexpected errors.
		return false, pkgErrs.ToError()
	}
	out := fmterr.Errors{}
	pkgErrs = pkgErrs.Transform(inspector.processPackageErrors)
	if pkgErrs != nil {
		// Even after we have removed the expected errors, there are still
		// some errors left. So, we add them to out.
		out.Append(fmt.Errorf("unexpected error(s) in the package:\n%+w", pkgErrs))
	}
	remainingErrs := inspector.notFoundExpectedErrors()
	if remainingErrs != nil {
		// Some errors were expected but could not be found.
		// So, we add these expected errors to out.
		out.Append(fmt.Errorf("expected error(s) in the package that could not be found:\n%w", remainingErrs))
	}
	testFuncs := findTests(pkg)
	if len(testFuncs) == 0 {
		return true, out.ToError()
	}
	// A package with expected errors cannot have test functions.
	// These tests would not be run anyway.
	for _, fn := range testFuncs {
		out.Append(fmterr.Errorf(pkg.FSet, fn.Source(), "test function %s in a package with expected errors not supported", fn.Name()))
	}
	return true, out.ToError()
}
