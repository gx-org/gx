package resolve

import (
	"math"
	"num"
	"shapes"
)

var errorVar undefined // ERROR undeclared

func testDoesNotExist() int64 {
	return doesnotexist.Unicorn() // ERROR undefined
}

func testReturnTooMany() int64 {
	return 5.1, 5.2 // ERROR too many return values
}

func testReturnNotEnough() (int64, float64) {
	return 5.1 // ERROR not enough return values
}

func testReturnIncorrectShape() [_][_]float64 {
	return [_][_][_]float64{} // ERROR cannot use
}

func testReturnIncorrectShape2() [_]float64 {
	return 1 // ERROR cannot use float64 as [_]float64 in return statement
}

func testReturnIncorrectType() [_]float64 {
	return [_]float32{00, 01, 02, 03} // ERROR cannot use [4]float32 as [_]float64
}

func testReturnIncorrectArgType(v float32) float64 {
	return v // ERROR cannot use float32
}

func testIncorrectSize1D() [_]float64 {
	return [3]float64{2, 3} // ERROR cannot reconcile
}

func testIncorrectSize2D() [1][2]float64 {
	return [1][2]float64{ // ERROR cannot reconcile
		{2, 3},
		{2, 3},
	}
}

func identityFloatArray(x [_]float32) [_]float32 {
	return x
}

func testIncorrectArgumentRank() [_]float32 {
	return identityFloatArray(32) // ERROR cannot use float32 as [_]float32 value in assignment
}

func testUnknownKind() [_]whatIsThis { // ERROR undeclared type identifier: whatIsThis
	return [2]float64{1, 2}
}

func testTensorNumberAssignment() [_]int64 {
	return [1]int64{123.42} // ERROR cannot use 123.42 (untyped FLOAT constant) as int64 value
}

func testTensorIncorrectType() [_]int64 {
	a := -1.0
	return [_]int64{a} // ERROR cannot use value of type float64 as value of type invalid in array
}

func testTensorDeclarationCannotUseDataType() [_][_]float64 {
	_ := [4][4]float64{
		[4]float64{00, 01, 02, 03},
		[4]float64{10, 11, 12, 13},
		[4]float32{20, 21, 22, 23}, // ERROR cannot use data type
		[4]float64{30, 31, 32, 33},
	}
}

func testTensorDeclarationUnexpectedDim() [_][_]float64 {
	return [4][4]float64{
		{00, 01, 02, 03},
		{10, 11, 12, 13},
		{20, 21}, // ERROR cannot reconcile
		{30, 31, 32, 33},
	}
}

func testTensorDeclarationUnexpectedBasic() [_][_][_]float64 {
	return [_][_][_]float64{
		{00, 01, 02, 03}, // ERROR cannot reconcile
	}
}

func testTensorDeclarationUntypeComposite() [_]float64 {
	return [_]float64{
		{00, 01, 02, 03}, // ERROR untyped composite literal
	}
}

func tuples() (float32, [_]float64, [_][_]float64) {
	return 3.2,
		[_]float64{1, 2, 3, 4},
		[_][_]float64{
			{1, 2},
			{3, 4},
		}
}

func testTupleWrongNumber() (float32, [_]float64) {
	a, b := tuples() // ERROR  assignment mismatch
}

func funcWith2Args(a, b float32) (float32, float32) {
	return a, b
}

func testCallTooManyArgs() float32 {
	c, d := funcWith2Args(1, 2, 3) // ERROR too many arguments
	return 0
}

func testCallNotEnoughArgs() float32 {
	c, d := funcWith2Args(1) // ERROR not enough arguments
	return 0
}

func testCallWrongType(a, b float64) float32 {
	c, d := funcWith2Args(a, b) // ERROR cannot use float64
	return 0
}

type unknownType someType // ERROR undeclared type

func testUnknownDType() float32 {
	a := [_]unknown{1, 2} // ERROR undeclared type identifier: unknown
}

type someStruct struct {
	a          int32
	someMethod float64
}

func (someStruct) duplicateMethod() float32 {
	return 0
}

func (someStruct) duplicateMethod() float32 { // ERROR method someStruct.duplicateMethod already declared
	return 0
}

func (someStruct) someMethod() float64 { // ERROR field and method with the same name
	return 0
}

func (float32) cannotDefineMethodOnNonLocal() float32 { // ERROR cannot define new methods on non-local type
	return 0
}

func testStructFieldUndefined() float32 {
	a := someStruct{
		a:          1,
		someMethod: 1,
		c:          0, // ERROR has no field
	}
	return 0
}

func testStructFieldIncorrectType() float32 {
	a := someStruct{ // ERROR field someMethod has not been assigned
		a: [_]float64{1}, // ERROR cannot use type
	}
	return 0
}

func testStructNumberAssignment() int64 {
	a := someStruct{
		a:          123.42, // ERROR cannot use 123.42 (untyped FLOAT constant) as int32 value
		someMethod: 123.42,
	}
	return 0
}

func testMissingField() float32 {
	return funcWith2Args.a // ERROR undefined: funcWith2Args.a
}

func testIncorrectSelectorType() float32 {
	return doesNotExist.a // ERROR undefined: doesNotExist
}

func testMultipleValueError() float32 {
	a := tuples() // ERROR multiple-value
	return a
}

func testMultipleAssignmentsExpr() float32 {
	a := 5
	a := 4 // ERROR no new variables
	_ := checkCompilerStop()
	return a
}

func testMultipleAssignmentsCall() float32 {
	a := 4
	a, b := funcWith2Args(4, 5) // ERROR cannot use float32 as int64
	_ := checkCompilerStop()
	return a
}

func testImportIsUndefined() float32 {
	return num.DoesNotExist // ERROR undefined: num.DoesNotExist
}

type myfloat float64

var (
	varMyFloat myfloat
	varFloat64 float64
)

func testExplicitCastMyFloatToFloat64() float64 {
	return varMyFloat // ERROR cannot use resolve.myfloat as float64 in return statement
}

func testExplicitCastFloat64ToMyFloat() myfloat {
	return varFloat64 // ERROR cannot use float64 as resolve.myfloat in return statement
}

func testExpIntTensor() [2]float32 {
	a := shapes.Shape{DType: 0, Dimensions: []intlen{}}
	return math.Exp(a) // ERROR argument type shapes.Shape not supported
}

func testSliceIncorrectType() []int64 {
	a := 2.3
	return []int64{a} // ERROR cannot use float64 as int64 in slice
}

func testSliceNumberAssignment() []int64 {
	return []int64{123.42} // ERROR cannot use 123.42 (untyped FLOAT constant) as int64 value
}

func testIncorrectCast() [_]float64 {
	return [2]float64(2) // ERROR cannot convert type float64 to
}

func testIncorrectShape() [_]float64 {
	return [3]float64([2]float32{1, 2}) // ERROR cannot convert type [2]float32 to type
}

func testConcatInferredType() [_]float32 {
	a := shapes.Concat(0, [_]float32{1, 2}, [_]float32{3, 4})
	b := [_]float32{1, 2}
	return a + b // ERROR mismatched types
}

func testConcatShapeError() [_]float32 {
	a := shapes.Concat(0, [2]float32{2, 3}, [2]float32{4, 5})
	return a + [2]float32{6, 7} // ERROR mismatched types [2+2]float32 and [2]float32
}

func testIncorrectTypeBinaryOperator() float64 {
	a := shapes.Shape{DType: 0, Dimensions: []intlen{}}
	b := shapes.Shape{DType: 0, Dimensions: []intlen{}}
	c := a + b // ERROR invalid
	return c
}

func testMulScalarFloat64Tensor1DFlat32() [2]float32 {
	a := 2
	return a * [2]float32{1, 2} // ERROR mismatched types int64 and float32
}

func testReshape() [2]float32 {
	return ([2][2]float32)([3]float32{1, 2, 3}) // ERROR cannot convert type
}

func testArrayToScalarDTypeMismatched() float32 {
	return [1]float64{1} // ERROR cannot use [1]float64 as float32 in return statement
}

func testScalarToArrayDTypeMismatched() [1]float32 {
	return float64(1) // ERROR cannot use float64 as [1]float32 in return statement
}

func testScalarToArrayDimensionsMismatched() [2]float64 {
	return float64(1) // ERROR cannot use float64 as [2]float64 in return statement
}

func testArrayToScalarDimensionsMismatched() float64 {
	return [2]float64{} // ERROR cannot use [2]float64 as float64 in return statement
}

func testBoolOperator() bool {
	return true + true // ERROR operator + not defined on bool
}

func testIncorrectIndexType() float32 {
	return [2]float32{}[float32(1)] // ERROR invalid argument
}

func testCastToGenericFloat64() [_]float64 {
	return ([_]float64)([3]float64{-1, 2, -3}) // ERROR missing axis length
}

func testArrayAsScalarFloat32() float32 {
	return [1]float32{1.0} // ERROR cannot use [1]float32 as float32
}

func testScalarAsArrayFloat32() [1]float32 {
	return 1.0 // ERROR cannot use float32 as [1]float32
}

func testForLoop(n int32) float32 {
	r := 0
	for i := range n { // ERROR cannot range over int32
		r = r + 1
	}
	return r
}

func testLambda_DisallowVariableCapture() int32 {
	x := 0
	return func() int32 {
		return 1 + x // ERROR undefined: x
	}()
}

func testLambda_DisallowVariableEscape() int32 {
	f := func() int32 {
		x := int32(42)
		return x
	}()
	return 1 + x // ERROR undefined: x
}

func testFuncTypeParameters_Invalid[T invalid]() int32 { // ERROR undeclared type identifier: invalid
	return 0
}

func returnZero[T int32, U int64]() int32 {
	return 0
}

func testCallTypeParameters_Missing() int32 {
	return returnZero() // ERROR type parameter inference is not supported
}

func testCallTypeParameters_TooFew() int32 {
	return returnZero[int32]() // ERROR not enough type arguments in call to returnZero
}

func testCallTypeParameters_TooMany() int32 {
	return returnZero[int32, int32, int64]() // ERROR too many type arguments in call to returnZero
}

func moduloFloat() float32 {
	a := float32(5.2)
	return a % 5 // ERROR operator % not defined on float32
}

func noBody() float32

func callNoBody() float32 {
	return noBody() // ERROR builtin function noBody has no implementation
}

func identity(a [___X]int32) [___X]int32 {
	return a
}

func testIdentityInference() [2]int32 {
	return identity([3]int32{1, 2, 3}) // ERROR cannot use [3]int32 as [2]int32 in return statement
}

func testIdentityInference2() [2]int32 {
	a := identity([2]int32{1, 2})
	b := identity([3]int32{1, 2, 3})
	b = identity(a) // ERROR cannot use [2]int32 as [3]int32 value in assignment
	return a
}

func testIdentityInference3() [2]int32 {
	a := identity([2]int32{1, 2})
	a = [3]int32{1, 2, 3} // ERROR cannot use [3]int32 as [2]int32 value in assignment
	return a
}

func invalidReturnShape(a [___X]int32) [___Y]int32 {
	return a // ERROR: cannot use [___X]int32 as [___Y]int32 in return statement
}

func invalidReturnShape2() [___X]int32 {
	return [5]int32{} // TODO: ERROR TBD
}

func invalidReturnShape3() [5]int32 {
	return [___X]int32{} // TODO: ERROR TBD
}

func invalidReturnShape4() [...]int32 {
	return [___X]int32{} // TODO: ERROR TBD
}

func repeatedShapeParameters(a, b [___X]int32) int32 {
	return 0
}

func repeatedShapeParameters2(a [___X]int32, b [___X]int32) int32 {
	return 0
}

func testRepeatedShapeParameters() int32 {
	return repeatedShapeParameters([10]int32{}, [20]int32{}) // ERROR cannot use [20]int32 as [10]int32 value in assignment
}

func testRepeatedShapeParameters2() int32 {
	return repeatedShapeParameters2([10]int32{}, [20]int32{}) // ERROR cannot use [20]int32 as [10]int32 value in assignment
}

func testReturnNumberAsString() string {
	return 3 // ERROR cannot use a number as string
}

func testReturnArrayAsString() string {
	return [1]float32{1} // ERROR cannot use [1]float32 as string in return statement
}
