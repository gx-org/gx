package process

var (
	errorVarValues int32 = 4, 5 // ERROR cannot assign

	errMore, errVars, errThanValues int32 = 4, 5 // ERROR cannot assign
)

func testNoReturn() { // ERROR function testNoReturn does not return a value
}

func testNoSize() [4]float64 {
	return [4][]float64{2, 3} // ERROR array of slices is not supported
}

func testMultipleUnknownAxes() [___]int32 {
	return [___][___]int32{} // ERROR array with an inferred rank only support a single axis
}

func testMultipleAddAssign() bool {
	x, y, z += 1 // ERROR unexpected +=, expected := or = or comma
	return true
}

func testMultipleMulAssign() bool {
	x, y, z *= 1 // ERROR unexpected *=, expected := or = or comma
	return true
}

func testMultipleSubAssign() bool {
	x, y, z -= 1 // ERROR unexpected -=, expected := or = or comma
	return true
}

func testMultipleDivAssign() bool {
	x, y, z /= 1 // ERROR unexpected /=, expected := or = or comma
	return true
}

func testAssignToNoName() float32 {
	a.b := 2 // ERROR non-name
	return 1
}

func testDuplicateNamesDeclare() float64 {
	a, a, b := 1.1, 1.2, 1.3 // ERROR a repeated on left side of :=
	return a + b
}

func testDuplicateNamesAssign() float64 {
	a, a, b = 1.1, 1.2, 1.3 // ERROR a repeated on left side of =
	return a + b
}

func (a, b someStruct) multipleReceivers() float32 { // ERROR method has multiple receivers
	return 0
}

func testFuncTypeParameters_Redeclared[T int32, T int32]() int32 { // ERROR type parameter T redeclared
	return 0
}

type testTypeParameters[T any] struct {} // ERROR type may not have type parameters

type testInterfaceMethods interface {
	Print() // ERROR interface element not supported
	String() string // ERROR interface element not supported
}
