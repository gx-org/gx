package slices_test

func TestSliceLiteralOneElementOneAxis() float32 {
	return [1]float32{3.14159}[0]
	// Want:
	// float32(3.14159)
}

func TestSliceLiteralOneSubarrayOneAxis() [1]float32 {
	return [1][1]float32{{3.14159}}[0]
	// Want:
	// [1]float32{3.14159}
}

func TestSliceVariableOneElementOneAxis() float32 {
	a := [...]float32{1, 2, 3, 4}
	return a[2]
	// Want:
	// float32(3)
}

func TestSliceVariableOneElementOneAxisIntlen() float32 {
	a := [...]float32{1, 2, 3, 4}
	return a[intlen(2)]
	// Want:
	// float32(3)
}

func TestBuildSlice() []intlen {
	a := []intlen{}
	for i := range 3 {
		a = append(a, i)
	}
	return a
	// Want:
	// 0: int64(0)
	// 1: int64(1)
	// 2: int64(2)
}

func TestBuildSliceOfArray() [][2]int32 {
	a := [][2]int32{}
	for il := range 3 {
		i := int32(il)
		a = append(a, [2]int32{i, i * 2})
	}
	return a
	// Want:
	// 0: [2]int32{0, 0}
	// 1: [2]int32{1, 2}
	// 2: [2]int32{2, 4}
}

func TestSetArraySilentlyClamped() [1][2]int32 {
	a := [1][2]int32{}
	return set(a, [2]int32{1, 2}, [1]int32{5})
	// Want:
	// [1][2]int32{
	// 	{0, 0},
	// }
}

func TestSetArray2Axes() [2][2]int32 {
	a := [2][2]int32{}
	a = set(a, [2]int32{1, 2}, [1]int32{0})
	a = set(a, [2]int32{3, 4}, [1]int32{1})
	return a
	// Want:
	// [2][2]int32{
	// 	{1, 2},
	// 	{3, 4},
	// }
}

func TestSetArray3Axes1() [1][2][2]int32 {
	a := [1][2][2]int32{}
	a = set(a, [2]int32{1, 2}, [2]int32{0, 0})
	a = set(a, [2]int32{3, 4}, [2]int32{0, 1})
	return a
	// Want:
	// [1][2][2]int32{
	// 	{
	// 		{1, 2},
	// 		{3, 4},
	// 	},
	// }
}

func TestSetArray3Axes2() [4][3][2]int32 {
	a := [4][3][2]int32{}
	for il := range 4 {
		i := int32(il)
		a = set(a, [3][2]int32{}+i, [1]int32{i})
	}
	return a
	// Want:
	// [4][3][2]int32{
	// 	{
	// 		{0, 0},
	// 		{0, 0},
	// 		{0, 0},
	// 	},
	// 	{
	// 		{1, 1},
	// 		{1, 1},
	// 		{1, 1},
	// 	},
	// 	{
	// 		{2, 2},
	// 		{2, 2},
	// 		{2, 2},
	// 	},
	// 	{
	// 		{3, 3},
	// 		{3, 3},
	// 		{3, 3},
	// 	},
	// }
}

func TestSetArray4AxesForLoops() [5][4][3][2]int32 {
	a := [5][4][3][2]int32{}
	for il := range 5 {
		i := int32(il)
		sub := [4][3][2]int32{}
		for jl := range 4 {
			j := int32(jl)
			sub = set(sub, [3][2]int32{}+(i+1)*(j+1), [1]int32{j})
		}
		a = set(a, sub, [1]int32{i})
	}
	return a
	// Want:
	// [5][4][3][2]int32{
	// 	{
	// 		{
	// 			{1, 1},
	// 			{1, 1},
	// 			{1, 1},
	// 		},
	// 		{
	// 			{2, 2},
	// 			{2, 2},
	// 			{2, 2},
	// 		},
	// 		{
	// 			{3, 3},
	// 			{3, 3},
	// 			{3, 3},
	// 		},
	// 		{
	// 			{4, 4},
	// 			{4, 4},
	// 			{4, 4},
	// 		},
	// 	},
	// 	{
	// 		{
	// 			{2, 2},
	// 			{2, 2},
	// 			{2, 2},
	// 		},
	// 		{
	// 			{4, 4},
	// 			{4, 4},
	// 			{4, 4},
	// 		},
	// 		{
	// 			{6, 6},
	// 			{6, 6},
	// 			{6, 6},
	// 		},
	// 		{
	// 			{8, 8},
	// 			{8, 8},
	// 			{8, 8},
	// 		},
	// 	},
	// 	{
	// 		{
	// 			{3, 3},
	// 			{3, 3},
	// 			{3, 3},
	// 		},
	// 		{
	// 			{6, 6},
	// 			{6, 6},
	// 			{6, 6},
	// 		},
	// 		{
	// 			{9, 9},
	// 			{9, 9},
	// 			{9, 9},
	// 		},
	// 		{
	// 			{12, 12},
	// 			{12, 12},
	// 			{12, 12},
	// 		},
	// 	},
	// 	{
	// 		{
	// 			{4, 4},
	// 			{4, 4},
	// 			{4, 4},
	// 		},
	// 		{
	// 			{8, 8},
	// 			{8, 8},
	// 			{8, 8},
	// 		},
	// 		{
	// 			{12, 12},
	// 			{12, 12},
	// 			{12, 12},
	// 		},
	// 		{
	// 			{16, 16},
	// 			{16, 16},
	// 			{16, 16},
	// 		},
	// 	},
	// 	{
	// 		{
	// 			{5, 5},
	// 			{5, 5},
	// 			{5, 5},
	// 		},
	// 		{
	// 			{10, 10},
	// 			{10, 10},
	// 			{10, 10},
	// 		},
	// 		{
	// 			{15, 15},
	// 			{15, 15},
	// 			{15, 15},
	// 		},
	// 		{
	// 			{20, 20},
	// 			{20, 20},
	// 			{20, 20},
	// 		},
	// 	},
	// }
}

func TestSetArray4AxesPosition() [5][4][3][2]int32 {
	a := [5][4][3][2]int32{}
	for il := range 5 {
		i := int32(il)
		for jl := range 4 {
			j := int32(jl)
			a = set(a, [3][2]int32{}+(i+1)*(j+1), [...]int32{i, j})
		}
	}
	return a
	// Want:
	// [5][4][3][2]int32{
	// 	{
	// 		{
	// 			{1, 1},
	// 			{1, 1},
	// 			{1, 1},
	// 		},
	// 		{
	// 			{2, 2},
	// 			{2, 2},
	// 			{2, 2},
	// 		},
	// 		{
	// 			{3, 3},
	// 			{3, 3},
	// 			{3, 3},
	// 		},
	// 		{
	// 			{4, 4},
	// 			{4, 4},
	// 			{4, 4},
	// 		},
	// 	},
	// 	{
	// 		{
	// 			{2, 2},
	// 			{2, 2},
	// 			{2, 2},
	// 		},
	// 		{
	// 			{4, 4},
	// 			{4, 4},
	// 			{4, 4},
	// 		},
	// 		{
	// 			{6, 6},
	// 			{6, 6},
	// 			{6, 6},
	// 		},
	// 		{
	// 			{8, 8},
	// 			{8, 8},
	// 			{8, 8},
	// 		},
	// 	},
	// 	{
	// 		{
	// 			{3, 3},
	// 			{3, 3},
	// 			{3, 3},
	// 		},
	// 		{
	// 			{6, 6},
	// 			{6, 6},
	// 			{6, 6},
	// 		},
	// 		{
	// 			{9, 9},
	// 			{9, 9},
	// 			{9, 9},
	// 		},
	// 		{
	// 			{12, 12},
	// 			{12, 12},
	// 			{12, 12},
	// 		},
	// 	},
	// 	{
	// 		{
	// 			{4, 4},
	// 			{4, 4},
	// 			{4, 4},
	// 		},
	// 		{
	// 			{8, 8},
	// 			{8, 8},
	// 			{8, 8},
	// 		},
	// 		{
	// 			{12, 12},
	// 			{12, 12},
	// 			{12, 12},
	// 		},
	// 		{
	// 			{16, 16},
	// 			{16, 16},
	// 			{16, 16},
	// 		},
	// 	},
	// 	{
	// 		{
	// 			{5, 5},
	// 			{5, 5},
	// 			{5, 5},
	// 		},
	// 		{
	// 			{10, 10},
	// 			{10, 10},
	// 			{10, 10},
	// 		},
	// 		{
	// 			{15, 15},
	// 			{15, 15},
	// 			{15, 15},
	// 		},
	// 		{
	// 			{20, 20},
	// 			{20, 20},
	// 			{20, 20},
	// 		},
	// 	},
	// }
}
