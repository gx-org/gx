package core

type myfloat float64

func TestMyFloat() myfloat {
	return -1
	// Want:
	// float64(-1)
}

func TestMyFloatUnaryOp() myfloat {
	return -myfloat(4.2)
	// Want:
	// float64(-4.2)
}

func TestMyFloatBinaryOp() myfloat {
	m := myfloat(4.2)
	return m + m
	// Want:
	// float64(8.4)
}

func TestConvertToNamedType() myfloat {
	return myfloat(float64(1.0))
	// Want:
	// float64(1)
}

func TestConvertFromNamedType() float64 {
	return float64(myfloat(1.0))
	// Want:
	// float64(1)
}

type (
	child struct {
		a myfloat
		b [3]float64
	}

	parent struct {
		m child
		a float32
	}
)

func newParent(m child, a float32) parent {
	return parent{m: m, a: a}
}

func TestMyStruct() (myfloat, [3]float64) {
	m := child{
		a: 5.0,
		b: [3]float64{1.0, 2.0, 3.0},
	}
	return m.a, m.b
	// Want:
	// 0: float64(5)
	// 1: [3]float64{1, 2, 3}
}

func TestStructField() parent {
	m := child{
		a: 5.0,
		b: [3]float64{1.0, 2.0, 3.0},
	}
	return parent{
		m: m,
		a: 3,
	}
	// Want:
	// core.parent{
	//	m: core.child{
	//		a: float64(5),
	//		b: [3]float64{1, 2, 3},
	//	},
	//	a: float32(3),
	// }
}

func TestNewParent() parent {
	m := child{
		a: 5.0,
		b: [3]float64{1.0, 2.0, 3.0},
	}
	return newParent(m, 3)
	// Want:
	// core.parent{
	// 	m: core.child{
	// 		a: float64(5),
	// 		b: [3]float64{1, 2, 3},
	// 	},
	//	a: float32(3),
	// }
}

func TestMultipleSelector() (float32, myfloat, [3]float64) {
	o := parent{
		a: 3,
		m: child{
			a: 5.0,
			b: [3]float64{1.0, 2.0, 3.0},
		},
	}
	return o.a, o.m.a, o.m.b
	// Want:
	// 0: float32(3)
	// 1: float64(5)
	// 2: [3]float64{1, 2, 3}
}

func (c child) scalar() myfloat {
	return c.a
}

func TestFunctionWithReceiverOnStruct() myfloat {
	m := child{
		a: 5.0,
		b: [3]float64{1.0, 2.0, 3.0},
	}
	return m.scalar()
	// Want:
	// float64(5)
}

func add(a, b [_ax0][_ax1]float32) [ax0][ax1]float32 {
	return a + b
}

func TestGenericDimensionsFloat32() [2][3]float32 {
	return add(
		[2][3]float32{{1, 2, 3}, {4, 5, 6}},
		[2][3]float32{{6, 5, 4}, {3, 2, 1}},
	)
	// Want:
	// [2][3]float32{
	// 	{7, 7, 7},
	// 	{7, 7, 7},
	// }
}

type matrix [2][3]float32

func (x matrix) top() [3]float32 {
   return x[0]
}

func TestNamedTypeIndexing() [3]float32 {
	m := matrix([2][3]float32{{1, 2, 3}, {4, 5, 6}})
	return m.top()
	// Want:
	// [3]float32{1, 2, 3}
}

type floats interface {
  bfloat16 | float32 | float64
}
