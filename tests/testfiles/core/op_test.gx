package core

func TestUnaryMinus() float64 {
	return -1
	// Want:
	// float64(-1)
}

func TestUnaryPlus() float64 {
	return +1
	// Want:
	// float64(1)
}

func TestAddScalars() float64 {
	return 1 + 2
	// Want:
	// float64(3)
}

func TestSubScalars() float64 {
	return 7 - 4
	// Want:
	// float64(3)
}

func TestMulScalars() float32 {
	return 3 * 4
	// Want:
	// float32(12)
}

func TestDivScalars() float32 {
	return 12 / 4
	// Want:
	// float32(3)
}

func TestBinaryOpNumberFloat32() float32 {
	return 3 * TestDivScalars()
	// Want:
	// float32(9)
}

func TestBinaryOpFloat32Number() float32 {
	return TestDivScalars() * 3
	// Want:
	// float32(9)
}

func TestBinaryAddSelf() int64 {
	x := 1
	return x + x
	// Want:
	// int64(2)
}

func TestParenFloat32() float32 {
	return 3 * (2 * 5)
	// Want:
	// float32(30)
}

func TestNegTensor3DFloat64() [2][2][2]float64 {
	return -[2][2][2]float64{
		{
			{1, -2},
			{3, 4},
		},
		{
			{5, 6},
			{-7, 8},
		},
	}
	// Want:
	// [2][2][2]float64{
	// 	{
	// 		{-1, 2},
	// 		{-3, -4},
	// 	},
	// 	{
	// 		{-5, -6},
	// 		{7, -8},
	// 	},
	// }
}

func TestAddTensor3DFloat64() [2][2][2]float64 {
	a := [2][2][2]float64{
		{
			{300, 301},
			{310, 311},
		},
		{
			{400, 401},
			{410, 411},
		},
	}
	b := [2][2][2]float64{
		{
			{100, 101},
			{110, 111},
		},
		{
			{200, 201},
			{210, 211},
		},
	}
	return a + b
	// Want:
	// [2][2][2]float64{
	// 	{
	// 		{400, 402},
	// 		{420, 422},
	// 	},
	// 	{
	// 		{600, 602},
	// 		{620, 622},
	// 	},
	// }
}

func TestSubTensor3DFloat64() [2][2][2]float64 {
	a := [2][2][2]float64{
		{
			{300, 301},
			{310, 311},
		},
		{
			{400, 401},
			{410, 411},
		},
	}
	b := [2][2][2]float64{
		{
			{100, 101},
			{110, 111},
		},
		{
			{200, 201},
			{210, 211},
		},
	}
	return a - b
	// Want:
	// [2][2][2]float64{
	// 	{
	// 		{200, 200},
	// 		{200, 200},
	// 	},
	// 	{
	// 		{200, 200},
	// 		{200, 200},
	// 	},
	// }
}

func TestMulTensor3DFloat64() [2][2][2]float64 {
	a := [2][2][2]float64{
		{
			{1, 2},
			{3, 4},
		},
		{
			{5, 6},
			{7, 8},
		},
	}
	b := [2][2][2]float64{
		{
			{8, 7},
			{6, 5},
		},
		{
			{4, 3},
			{2, 1},
		},
	}
	return a * b
	// Want:
	// [2][2][2]float64{
	// 	{
	// 		{8, 14},
	// 		{18, 20},
	// 	},
	// 	{
	// 		{20, 18},
	// 		{14, 8},
	// 	},
	// }
}

func TestDivTensor3DFloat64() [2][2][2]float64 {
	a := [2][2][2]float64{
		{
			{10, 20},
			{30, 40},
		},
		{
			{50, 60},
			{70, 80},
		},
	}
	b := [2][2][2]float64{
		{
			{5, 10},
			{15, 20},
		},
		{
			{25, 30},
			{35, 40},
		},
	}
	return a / b
	// Want:
	// [2][2][2]float64{
	// 	{
	// 		{2, 2},
	// 		{2, 2},
	// 	},
	// 	{
	// 		{2, 2},
	// 		{2, 2},
	// 	},
	// }
}

func TestMulScalarTensor1DFloat32() [2]float32 {
	return 2 * [2]float32{3, -5}
	// Want:
	// [2]float32{6, -10}
}

func TestMulTensor1DScalarFloat32() [2]float32 {
	return [2]float32{3, -5} * -2
	// Want:
	// [2]float32{-6, 10}
}

func TestReAssignInt64() int64 {
	a := 2
	a = 3
	return a
	// Want:
	// int64(3)
}

func TestEqualScalar() bool {
	return 5 == 5
	// Want:
	// bool(true)
}

func TestEqualScalarVariables() bool {
	a := 6
	return 5 == a
	// Want:
	// bool(false)
}

func TestEqualScalarArray() [3]bool {
	return int32(2) == [...]int32{1, 2, 3}
	// Want:
	// [3]bool{false, true, false}
}

func TestEqualArrayScalar() [3]bool {
	return [...]int32{1, 2, 3} == int32(2)
	// Want:
	// [3]bool{false, true, false}
}

func TestEqualArrayArray() [3]bool {
	return [...]int32{1, 4, 3} == [...]int32{1, 2, 3}
	// Want:
	// [3]bool{true, false, true}
}

func TestCallBeforeFuncDefinition() [2][2]int64 {
	return funcA() + funcB()
	// Want:
	// [2][2]int64{
	// 	{124, 125},
	// 	{126, 127},
	// }
}

func funcA() int64 {
	return 123
}

func funcB() [2][2]int64 {
	return [2][2]int64{{1, 2}, {3, 4}}
}

func TestCallAfterFuncDefinition() [2][2]int64 {
	return funcA() + funcB()
	// Want:
	// [2][2]int64{
	// 	{124, 125},
	// 	{126, 127},
	// }
}

func TestModuloAtomicAtomic() int32 {
	return 8 % 3
	// Want:
	// int32(2)
}

func TestModuloArrayArray() [3]int32 {
	return [3]int32{6, 7, 8} % [3]int32{3, 3, 3}
	// Want:
	// [3]int32{0, 1, 2}
}

func TestModuloArrayAtomic() [3]int32 {
	return [3]int32{6, 7, 8} % 3
	// Want:
	// [3]int32{0, 1, 2}
}

func TestModuloAtomicArray() [3]int32 {
	return 20 % [3]int32{6, 7, 8}
	// Want:
	// [3]int32{2, 6, 4}
}

func TestShiftLeftAtomicAtomic() int32 {
	return 8 << 1
	// Want:
	// int32(16)
}

func TestShiftLeftArrayArray() [3]int32 {
	return [3]int32{6, 7, 8} << [3]int32{3, 2, 1}
	// Want:
	// [3]int32{48, 28, 16}
}

func TestShiftLeftArrayAtomic() [3]int32 {
	return [3]int32{6, 7, 8} << 1
	// Want:
	// [3]int32{12, 14, 16}
}

func TestShiftLeftAtomicArray() [3]int32 {
	return 20 << [3]int32{1, 2, 3}
	// Want:
	// [3]int32{40, 80, 160}
}

func TestShiftRightAtomicAtomic() int32 {
	return 8 >> 1
	// Want:
	// int32(4)
}

func TestShiftRightArrayArray() [3]int32 {
	return [3]int32{512, 256, 128} >> [3]int32{3, 2, 1}
	// Want:
	// [3]int32{64, 64, 64}
}

func TestShiftRightArrayAtomic() [6]int32 {
	return [6]int32{6, 7, 8, -1, -2, -4} >> 1
	// Want:
	// [6]int32{3, 3, 4, -1, -1, -2}
}

func TestShiftRightArrayAtomicUnsigned() [3]uint32 {
	return [3]uint32{4294967295, 2147483648, 1073741824} >> 1
	// Want:
	// [3]uint32{2147483647, 1073741824, 536870912}
}

func TestShiftRightAtomicArray() [3]int32 {
	return 1024 >> [3]int32{3, 2, 1}
	// Want:
	// [3]int32{128, 256, 512}
}

func TestBitwiseAndAtomicAtomic() int32 {
	return 15 & 3
	// Want:
	// int32(3)
}

func TestBitwiseOrAtomicAtomic() int32 {
	return 112 | 7
	// Want:
	// int32(119)
}

func TestBitwiseXorAtomicAtomic() int32 {
	return 6^3
	// Want:
	// int32(5)
}
