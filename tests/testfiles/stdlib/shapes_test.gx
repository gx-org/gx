package stdlib

import (
	"shapes"
)

func TestConcat1Da() [6]float32 {
	return shapes.Concat(
		0,
		[...]float32{1, 2},
		[...]float32{3, 4},
		[...]float32{5, 6},
	)
	// Want:
	// [6]float32{1, 2, 3, 4, 5, 6}
}

func TestConcat1Db() [4]float32 {
	a := shapes.Concat(
		0,
		[...]float32{1, 2},
		[...]float32{3, 4},
	)
	b := [...]float32{1, 2, 3, 4}
	return a + b
	// Want:
	// [4]float32{2, 4, 6, 8}
}

func TestConcat2Da() [4][2]float32 {
	return shapes.Concat(
		0,
		[2][2]float32{{1, 2}, {3, 4}},
		[2][2]float32{{5, 6}, {7, 8}},
	)
	// Want:
	// [4][2]float32{
	// 	{1, 2},
	// 	{3, 4},
	// 	{5, 6},
	// 	{7, 8},
	// }
}

func TestConcat2Db() [3][2]float32 {
	return shapes.Concat(
		0,
		[2][2]float32{{1, 2}, {3, 4}},
		[1][2]float32{{5, 6}},
	)
	// Want:
	// [3][2]float32{
	// 	{1, 2},
	// 	{3, 4},
	// 	{5, 6},
	// }
}

func TestConcat2Dc() [2][5]float32 {
	return shapes.Concat(
		1,
		[2][2]float32{{1, 2}, {3, 4}},
		[2][3]float32{{5, 6, 7}, {8, 9, 10}},
	)
	// Want:
	// [2][5]float32{
	// 	{1, 2, 5, 6, 7},
	// 	{3, 4, 8, 9, 10},
	// }
}

func TestConcat3D() [4][2][2]float32 {
	return shapes.Concat(
		0,
		[2][2][2]float32{{{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}},
		[1][2][2]float32{{{9, 10}, {11, 12}}},
		[1][2][2]float32{{{13, 14}, {15, 16}}},
	)
	// Want:
	// [4][2][2]float32{
	// 	{
	// 		{1, 2},
	// 		{3, 4},
	// 	},
	// 	{
	// 		{5, 6},
	// 		{7, 8},
	// 	},
	// 	{
	// 		{9, 10},
	// 		{11, 12},
	// 	},
	// 	{
	// 		{13, 14},
	// 		{15, 16},
	// 	},
	// }
}

func LenUnknownRank(x [_]float32) int64 {
	return shapes.Len[float32](x)
}

func TestLen1a() int64 {
	return shapes.Len[float32]([3]float32{1, 2, 3})
	// Want:
	// int64(3)
}

func TestLen1b() int64 {
	return shapes.Len[float32]([...]float32{1, 2, 3})
	// Want:
	// int64(3)
}

func TestLen1c() int64 {
	return LenUnknownRank([...]float32{1, 2, 3})
	// Want:
	// int64(3)
}

// Note that LenUnknownRank appears to get bound to [...=3]float32, such that this now fails:
//   LenUnknownRank([...]float32{1, 2, 3, 4, 5, 6})

func TestLen2a() int64 {
	return shapes.Len[float32]([2][3]float32{{1, 2, 3}, {4, 5, 6}})
	// Want:
	// int64(2)
}

func TestLen2b() int64 {
	return shapes.Len[float32]([...]float32{{1, 2, 3}, {4, 5, 6}})
	// Want:
	// int64(2)
}

func TestSplit1Da() [2][2]float32 {
	return shapes.Split(0, [4]float32{1, 2, 3, 4}, 2)
	// Want:
	// [2][2]float32{
	// 	{1, 2},
	// 	{3, 4},
	// }
}

func TestSplit1Db() [3][3]int32 {
	return shapes.Split(0, [9]int32{1, 2, 3, 4, 5, 6, 7, 8, 9}, 3)
	// Want:
	// [3][3]int32{
	// 	{1, 2, 3},
	// 	{4, 5, 6},
	// 	{7, 8, 9},
	// }
}

func TestSplit2Da() [4][1][4]float32 {
	return shapes.Split(0, [4][4]float32{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4)
	// Want:
	// [4][1][4]float32{
	// 	{
	// 		{1, 2, 3, 4},
	// 	},
	// 	{
	// 		{5, 6, 7, 8},
	// 	},
	// 	{
	// 		{9, 10, 11, 12},
	// 	},
	// 	{
	// 		{13, 14, 15, 16},
	// 	},
	// }
}

func TestSplit2Db() [4][4][1]float32 {
	return shapes.Split(1, [4][4]float32{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4)
	// Want:
	// [4][4][1]float32{
	// 	{
	// 		{1},
	// 		{5},
	// 		{9},
	// 		{13},
	// 	},
	// 	{
	// 		{2},
	// 		{6},
	// 		{10},
	// 		{14},
	// 	},
	// 	{
	// 		{3},
	// 		{7},
	// 		{11},
	// 		{15},
	// 	},
	// 	{
	// 		{4},
	// 		{8},
	// 		{12},
	// 		{16},
	// 	},
	// }
}

func TestBroadcast1DTo2D() [4][3]float32 {
	return shapes.Broadcast(
		[1][3]float32{{4, 5, 6}},
		[]intlen{4, 3},
	)
	// Want:
	// [4][3]float32{
	// 	{4, 5, 6},
	// 	{4, 5, 6},
	// 	{4, 5, 6},
	// 	{4, 5, 6},
	// }
}

func TestBroadcast1To2() [3][4]float32 {
	return shapes.Broadcast(
		[3][1]float32{{4}, {5}, {6}},
		[]intlen{3, 4},
	)
	// Want:
	// [3][4]float32{
	// 	{4, 4, 4, 4},
	// 	{5, 5, 5, 5},
	// 	{6, 6, 6, 6},
	// }
}

func TestSliceBackendNode() [2]float32 {
	return shapes.Split(0, [6]float32{1, 2, 3, 4, 5, 6}, 3)[1]
	// Want:
	// [2]float32{3, 4}
}

func TestGather1() [2]float32 {
	return shapes.Gather([4]float32{2, 4, 6, 8}, [2][1]int64{{1}, {2}})
	// Want:
	// [2]float32{4, 6}
}

func TestGather2a() [1][2]float32 {
	return shapes.Gather([3][2]float32{{1, 2}, {3, 4}, {5, 6}}, [1]int64{1})
	// Want:
	// [2]float32{3, 4}
}

func TestGather2b() [2]float32 {
	return shapes.Gather([3][2]float32{{1, 2}, {3, 4}, {5, 6}}, [2][2]int64{{2, 0}, {0, 1}})
	// Want:
	// [2]float32{5, 2}
}

const size = 3

func TestBroadcastWithVar() [size][2]float32 {
	return shapes.Broadcast([1][2]float32{
		[2]float32{.5, .5},
	}, []intlen{size, 2})
	// Want:
	// [3][2]float32{
	// 	{0.5, 0.5},
	// 	{0.5, 0.5},
	// 	{0.5, 0.5},
	// }
}
