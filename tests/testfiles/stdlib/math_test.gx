package stdlib

import "math"

func TestInfFloat32() (float32, float32) {
	return math.InfFloat32, math.NegInfFloat32
	// Want:
	// 0: float32(+Inf)
	// 1: float32(-Inf)
}

func TestInfFloat64() (float64, float64) {
	return math.InfFloat64, math.NegInfFloat64
	// Want:
	// 0: float64(+Inf)
	// 1: float64(-Inf)
}

func TestExpScalar() float64 {
	return math.Exp[float64](1.0)
	// Want:
	// float64(2.7182818285)
}

func TestExpTensor() [2]float32 {
	return math.Exp[float32]([...]float32{
		0, 1,
	})
	// Want:
	// [2]float32{1, 2.718282}
}

func TestPowScalarScalar() float64 {
	return math.Pow(2.0, 4.0)
	// Want:
	// float64(16)
}

func TestPowScalarArrayFloat32() [2]float32 {
	return math.Pow([2]float32{2, 3}, 2)
	// Want:
	// [2]float32{4, 9}
}

func TestPowScalarArrayInt() [2]int32 {
	return math.Pow([2]int32{2, 3}, 2)
	// Want:
	// [2]int32{4, 9}
}

func TestPowArrayArrayInt() [2]int32 {
	return math.Pow([2]int32{2, 3}, [2]int32{4, 5})
	// Want:
	// [2]int32{16, 243}
}

func TestMinScalarArrayFloat32() [2]float32 {
	return math.Min([2]float32{-2, 3}, 2)
	// Want:
	// [2]float32{-2, 2}
}

func TestMinArrayArrayInt() [2]int32 {
	return math.Min([2]int32{2, 3}, [2]int32{3, -2})
	// Want:
	// [2]int32{2, -2}
}

func TestMaxScalarArrayFloat32() [2]float32 {
	return math.Max([2]float32{-2, 3}, 2)
	// Want:
	// [2]float32{2, 3}
}

func TestMaxArrayArrayInt() [2]int32 {
	return math.Max([2]int32{2, -3}, [2]int32{3, -2})
	// Want:
	// [2]int32{3, -2}
}

func TestCosScalar() float64 {
	return math.Cos[float64](0.0)
	// Want:
	// float64(1)
}

func TestCosScalarArrayFloat32() [2]float32 {
	return math.Cos[float32]([2]float32{0, 3.141592653589793})
	// Want:
	// [2]float32{1, -1}
}

func TestSinScalar() float64 {
	return math.Sin[float64](0.0)
	// Want:
	// float64(0)
}

func TestLogScalar() (float64, float64) {
	return math.Log[float64](1.0), math.Log[float64](16.0) / math.Log[float64](2.0)
	// Want:
	// 0: float64(0)
	// 1: float64(4)
}

func TestLogSqrt() (float64, float64) {
	return math.Sqrt[float64](1.0), math.Sqrt[float64](144.0)
	// Want:
	// 0: float64(1)
	// 1: float64(12)
}

func TestCeilScalar() (float32, float64) {
	return math.Ceil[float32](1.75), math.Ceil[float64](4)
	// Want:
	// 0: float32(2)
	// 1: float64(4)
}

func TestCeilFloat32() [2]float32 {
	return math.Ceil[float32]([2]float32{-0.5, 1.5})
	// Want:
	// [2]float32{-0, 2}
}

func TestCeilFloat64() [2][2]float64 {
	data := [2][2]float64{{-0.5, 1.5}, {2.5, -3.5}}
	data = math.Ceil[float64](data)
	return data
	// Want:
	// [2][2]float64{
	// 	{-0, 2},
	// 	{3, -3},
	// }
}

func TestCeilAtomicInferred() (float32, float64, float64) {
	return math.Ceil(float32(1.75)), math.Ceil(float64(4)), math.Ceil[float64](1.0)
	// Want:
	// 0: float32(2)
	// 1: float64(4)
	// 2: float64(1)
}

func TestCeilArrayInferred() ([2]float32, [2]float64) {
	return math.Ceil[float32]([2]float32{0.5, 1.5}), math.Ceil[float64]([2]float64{3.5, 7.5})
	// Want:
	// 0: [2]float32{1, 2}
	// 1: [2]float64{4, 8}
}
