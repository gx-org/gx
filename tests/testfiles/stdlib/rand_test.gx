package stdlib

import "rand"

// Test options:
// setStatic Size intlen 2

func TestRandUniformUint64() ([2][3]uint64, [2][3]uint64) {
	rnd := rand.New(rand.NewSource(0))
	rnd, a := rnd.Uint64([]intlen{2, 3})
	rnd, b := rnd.Uint64([]intlen{2, 3})
	return a, b
	// Want:
	// 0: [2][3]uint64{
	// 	{5593899049600577110, 15353157502835371651, 596190196732659588},
	// 	{5614058057677614496, 9713047263490594073, 17857316907901081200},
	// }
	// 1: [2][3]uint64{
	// 	{10826104460941062082, 13199785683230879330, 11346820297660219021},
	// 	{5989968235824991032, 13384425856091111145, 3558705469962351023},
	// }
}

func TestRandUniformFloat64() ([2][3]float64, [2][3]float64) {
	rnd := rand.New(rand.NewSource(0))
	rnd, a := rnd.Float64([]intlen{2, 3})
	rnd, b := rnd.Float64([]intlen{2, 3})
	return a, b
	// Want:
	// 0: [2][3]float64{
	// 	{0.3032458751, 0.832296336, 0.0323195353},
	// 	{0.3043386971, 0.5265453472, 0.9680470893},
	// }
	// 1: [2][3]float64{
	// 	{0.5868842988, 0.7155618157, 0.6151123609},
	// 	{0.3247168287, 0.7255711795, 0.1929178101},
	// }
}

func TestRandUniformFloat32() ([2][3]float32, [2][3]float32) {
	rnd := rand.New(rand.NewSource(0))
	rnd, a := rnd.Float32([]intlen{2, 3})
	rnd, b := rnd.Float32([]intlen{2, 3})
	return a, b
	// Want:
	// 0: [2][3]float32{
	// 	{0.253272, 0.303246, 0.504397},
	// 	{0.832296, 0.245392, 0.032319},
	// }
	// 1: [2][3]float32{
	// 	{0.198972, 0.526545, 0.597738},
	// 	{0.968047, 0.904937, 0.586884},
	// }
}

func TestFloat32Axis1() [2]float32 {
	rnd := rand.New(rand.NewSource(0))
	_, smpl := rnd.Float32([]intlen{2})
	return smpl
	// Want:
	// [2]float32{0.253272, 0.303246}
}

func TestFloat32Axis2() [3][2]float32 {
	rnd := rand.New(rand.NewSource(0))
	_, smpl := rnd.Float32([]intlen{3, 2})
	return smpl
	// Want:
	// [3][2]float32{
	// 	{0.253272, 0.303246},
	// 	{0.504397, 0.832296},
	// 	{0.245392, 0.032319},
	// }
}

var Size intlen

func TestRandUniformFloat32WithSize() [Size]float32 {
	rnd := rand.New(rand.NewSource(0))
	_, a := rnd.Float32([]intlen{Size})
	return a
	// Want:
	// [2]float32{0.253272, 0.303246}
}

func TestFloat32MinMax() [5]float32 {
	rnd := rand.New(rand.NewSource(0))
	_, a := rnd.Float32MinMax(-100.5, 100.75, []intlen{5})
	return a
	// Want:
	// [5]float32{-49.529022, -39.471786, 1.009949, 66.999619, -51.114819}
}

func TestFloat64MinMax() [5]float64 {
	rnd := rand.New(rand.NewSource(0))
	_, a := rnd.Float64MinMax(-100, 100.75, []intlen{5})
	return a
	// Want:
	// [5]float64{-39.1233905713, 67.0834894428, -93.5118532834, -38.9040065512, 5.7039784557}
}
