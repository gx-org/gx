package gx_test

import (
	"num"
)

// Test options:
// setStatic dim1 intlen 2
// setStatic dim2 intlen 3
// setStatic dim3 intlen 4

func TestSumVector() int64 {
	return num.Sum([...]int64{
		1, 2, 3,
	}, []intidx{0})
	// Want:
	// int64(6)
}

func TestSumVectorWithoutAxes() [3]int64 {
	return num.Sum([...]int64{
		1, 2, 3,
	}, []intidx{})
	// Want:
	// [3]int64{1, 2, 3}
}

func TestSumTensor3DFloat32() [2][2]float32 {
	return num.Sum([_][_][_]float32{
		{
			{0, 1},
			{10, 11},
		},
		{
			{100, 101},
			{110, 111},
		},
	}, []intidx{0})
	// Want:
	// [2][2]float32{
	// 	{100, 102},
	// 	{120, 122},
	// }
}

func TestTranspose1Axis() [3]float32 {
	return num.Transpose([...]float32{1, 2, 3})
	// Want:
	// [3]float32{1, 2, 3}
}

func TestTranspose2Axes() [3][2]float32 {
	return num.Transpose([2][3]float32{
		{1, 2, 3},
		{4, 5, 6},
	})
	// Want:
	// [3][2]float32{
	// 	{1, 4},
	// 	{2, 5},
	// 	{3, 6},
	// }
}

func TestTranspose3Axes() [4][3][2]float32 {
	return num.Transpose([2][3][4]float32{
		{
			{1, 2, 3, 4},
			{5, 6, 7, 8},
			{9, 10, 11, 12},
		},
		{
			{13, 14, 15, 16},
			{17, 18, 19, 20},
			{21, 22, 23, 24},
		},
	})
	// Want:
	// [4][3][2]float32{
	// 	{
	// 		{1, 13},
	// 		{5, 17},
	// 		{9, 21},
	// 	},
	// 	{
	// 		{2, 14},
	// 		{6, 18},
	// 		{10, 22},
	// 	},
	// 	{
	// 		{3, 15},
	// 		{7, 19},
	// 		{11, 23},
	// 	},
	// 	{
	// 		{4, 16},
	// 		{8, 20},
	// 		{12, 24},
	// 	},
	// }
}

func TestEinsum1() float32 {
	// Dot product: contracting LHS/RHS axis 0.
	x := [...]float32{1, 2, 3}
	y := [...]float32{4, 5, 6}
	return num.Einsum(x, []intidx{0}, []intidx{}, y, []intidx{0}, []intidx{})
	// Want:
	// float32(32)
}

func TestEinsum1Batched() [2]float32 {
	// Batched dot product: contracting LHS/RHS axis 1, batch LHS/RHS axis 0.
	x := [2][_]float32{{1, 2, 3}, {4, 5, 6}}
	y := [2][_]float32{{7, 8, 9}, {1, 2, 3}}
	return num.Einsum(x, []intidx{1}, []intidx{0}, y, []intidx{1}, []intidx{0})
	// Want:
	// [2]float32{50, 32}
}

func TestEinsum2() [2][2]float32 {
	// Regular matrix multiply: contract LHS axis 1 with RHS axis 0.
	x := [2][2]float32{{1, 2}, {3, 4}}
	y := [2][2]float32{{4, 5}, {6, 7}}
	return num.Einsum(x, []intidx{1}, []intidx{}, y, []intidx{0}, []intidx{})
	// Want:
	// [2][2]float32{
	// 	{16, 19},
	// 	{36, 43},
	// }
}

func TestEinsum2Batched() [2][2][2]float32 {
	// Batched matrix multiply: contract LHS axis 2 with RHS axis 1, batch LHS/RHS axis 0.
	x := [2][2][2]float32{{{1, 2}, {3, 4}}, {{1, 2}, {3, 4}}}
	y := [2][2][2]float32{{{1, 0}, {0, 1}}, {{0, 1}, {1, 0}}}
	return num.Einsum(x, []intidx{2}, []intidx{0}, y, []intidx{1}, []intidx{0})
	// Want:
	// [2][2][2]float32{
	// 	{
	// 		{1, 2},
	// 		{3, 4},
	// 	},
	// 	{
	// 		{2, 1},
	// 		{4, 3},
	// 	},
	// }
}

func TestEinsum2Batched2() [2][2][2]float64 {
	// Batched matrix multiply: contract LHS axis 2 with RHS axis 1, batch LHS/RHS axis 0.
	x := [2][2][1]float64{{{1}, {2}}, {{3}, {4}}}
	y := [2][1][2]float64{{{5, 6}}, {{7, 8}}}
	return num.Einsum(x, []intidx{2}, []intidx{0}, y, []intidx{1}, []intidx{0})
	// Want:
	// [2][2][2]float64{
	// 	{
	// 		{5, 6},
	// 		{10, 12},
	// 	},
	// 	{
	// 		{21, 24},
	// 		{28, 32},
	// 	},
	// }
}

func TestEinsum2CrossProduct() [2][2][2]float32 {
	// Cross-product matrix multiply: contract LHS axis 2 with RHS axis 0.
	x := [2][2][2]float32{{{1, 2}, {3, 4}}, {{4, 3}, {2, 1}}}
	y := [2][2]float32{{1, 0}, {0, 1}}
	return num.Einsum(x, []intidx{2}, []intidx{}, y, []intidx{0}, []intidx{})
	// Want:
	// [2][2][2]float32{
	// 	{
	// 		{1, 2},
	// 		{3, 4},
	// 	},
	// 	{
	// 		{4, 3},
	// 		{2, 1},
	// 	},
	// }
}

func TestWeightedSum() [3]float32 {
	x := [2]float32{0.25, 0.5}
	y := [3]float32{4, 8, 12}
	return num.Sum(num.Einsum(x, []intidx{}, []intidx{}, y, []intidx{}, []intidx{}), []intidx{0})
	// Want:
	// [3]float32{3, 6, 9}
}

func TestMatMulScalars() float64 {
	x := [1]float64{1}
	w := [1]float64{-1}
	return num.MatMul(x, w)
	// Want:
	// float64(-1)
}

func TestMatMul1Axis() float64 {
	x := [3]float64{1, 2, 3}
	w := [3]float64{-1, -2, -3}
	return num.MatMul(x, w)
	// Want:
	// float64(-14)
}

func TestMatMul2Axis() [2]float64 {
	x := [3]float64{1., 2., 3.}
	w := [3][2]float64{
		{4, 5},
		{6, 7},
		{8, 9},
	}
	return num.MatMul(x, w)
	// Want:
	// [2]float64{40, 46}
}

func TestMatMul4Axis() [5][7]float64 {
	x := [5][6]float64{}
	y := [6][7]float64{}
	return num.MatMul(x, y)
	// Want:
	// [5][7]float64{
	// 	{0, 0, 0, 0, 0, 0, 0},
	// 	{0, 0, 0, 0, 0, 0, 0},
	// 	{0, 0, 0, 0, 0, 0, 0},
	// 	{0, 0, 0, 0, 0, 0, 0},
	// 	{0, 0, 0, 0, 0, 0, 0},
	// }
}

func TestIotaAxis0() [4][3]int64 {
	return num.Iota([]intlen{4, 3}, 0)
	// Want:
	// [4][3]int64{
	// 	{0, 0, 0},
	// 	{1, 1, 1},
	// 	{2, 2, 2},
	// 	{3, 3, 3},
	// }
}

func TestIotaAxis1() [4][3]int64 {
	return num.Iota([]intlen{4, 3}, 1)
	// Want:
	// [4][3]int64{
	// 	{0, 1, 2},
	// 	{0, 1, 2},
	// 	{0, 1, 2},
	// 	{0, 1, 2},
	// }
}

func TestIotaFull() [4][3]int64 {
	return num.IotaFull([]intlen{4, 3})
	// Want:
	// [4][3]int64{
	// 	{0, 1, 2},
	// 	{3, 4, 5},
	// 	{6, 7, 8},
	// 	{9, 10, 11},
	// }
}

func TestIotaConstructAxes() [4][3]int64 {
	oneAxis := []intlen{4}
	twoAxis := append(oneAxis, 3)
	return num.IotaFull(twoAxis)
	// Want:
	// [4][3]int64{
	// 	{0, 1, 2},
	// 	{3, 4, 5},
	// 	{6, 7, 8},
	// 	{9, 10, 11},
	// }
}

func TestReduceMax1() [4]float64 {
	return num.ReduceMax([4]float64{-1, 0, 2, -4}, []intidx{})
	// Want:
	// [4]float64{-1, 0, 2, -4}
}

func TestReduceMax1b() float64 {
	return num.ReduceMax([4]float64{-1, 0, 2, -4}, []intidx{0})
	// Want:
	// float64(2)
}

func TestReduceMax2() [2][4]float64 {
	return num.ReduceMax([2][4]float64{{-1, 0, 2, -4}, {1, 0, 2, 4}}, []intidx{})
	// Want:
	// [2][4]float64{
	// 	{-1, 0, 2, -4},
	// 	{1, 0, 2, 4},
	// }
}

func TestReduceMax2b() [4]float64 {
	return num.ReduceMax([2][4]float64{{-1, 0, 2, -4}, {1, 0, 2, 4}}, []intidx{0})
	// Want:
	// [4]float64{1, 0, 2, 4}
}

func TestReduceMax2c() [2]float64 {
	return num.ReduceMax([2][4]float64{{-1, 0, 2, -4}, {1, 0, 2, 4}}, []intidx{1})
	// Want:
	// [2]float64{2, 4}
}

func TestReduceMax2d() float64 {
	return num.ReduceMax([2][4]float64{{-1, 0, 2, -4}, {1, 0, 2, 4}}, []intidx{0, 1})
	// Want:
	// float64(4)
}

func TestReduceMax3() [2][2]float64 {
	return num.ReduceMax([2][2][2]float64{{{1, 2}, {4, 8}}, {{8, 1}, {2, 4}}}, []intidx{1})
	// Want:
	// [2][2]float64{
	// 	{4, 8},
	// 	{8, 4},
	// }
}

func TestReduceMax3b() [2][2]float64 {
	return num.ReduceMax([2][2][2]float64{{{1, 2}, {4, 8}}, {{8, 1}, {2, 4}}}, []intidx{0})
	// Want:
	// [2][2]float64{
	// 	{8, 2},
	// 	{4, 8},
	// }
}

func TestReduceMax3c() float64 {
	return num.ReduceMax([2][2][2]float64{{{1, 2}, {4, 8}}, {{8, 1}, {2, 4}}}, []intidx{0, 1, 2})
	// Want:
	// float64(8)
}

func TestArgmax0() int64 {
	return num.Argmax([...]float32{-1, 2, -4, 8, -16}, 0)
	// Want:
	// int64(3)
}

func TestArgmax1() [2]int64 {
	return num.Argmax([2][2]float32{{-1, 4}, {0, 2}}, 0)
	// Want:
	// [2]int64{1, 0}
}

var (
	dim1 intlen
	dim2 intlen
	dim3 intlen
)

func TestMatmulVarsDimMatrixMatrix() [dim1][dim3]float32 {
	return num.MatMul([dim1][dim2]float32{}, [dim2][dim3]float32{})
	// Want:
	// [2][4]float32{
	// 	{0, 0, 0, 0},
	// 	{0, 0, 0, 0},
	// }
}

func TestMatmulVarsDimVectorMatrix() [dim1]float32 {
	return num.MatMul([dim1][dim2]float32{}, [dim2]float32{})
	// Want:
	// [2]float32{0, 0}
}
