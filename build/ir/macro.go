// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ir

import (
	"go/ast"
)

type (
	// MacroElement is an element generated by calling a macro implementation.
	MacroElement interface {
		Element
		From() *Macro
	}

	// MacroImpl is a builtin opaque function to produce an IR.
	MacroImpl func(file *File, call *CallExpr, fn *Macro, args []Element) (MacroElement, error)
)

// MacroCallExpr calls a macro.
type MacroCallExpr struct {
	M *Macro // Macro used to generate the function being called.

	X Expr
	F Func
	T *FuncType
}

var _ Callee = (*MacroCallExpr)(nil)

func (s *MacroCallExpr) node()       {}
func (s *MacroCallExpr) assignable() {}

// Type returns the type of the function.
func (s *MacroCallExpr) Type() Type {
	return s.T
}

// Func returns the function generated by the macro.
func (s *MacroCallExpr) Func() Func {
	return s.F
}

// FuncType returns the concrete type of the function.
func (s *MacroCallExpr) FuncType() *FuncType {
	return s.T
}

// Source returns the node in the AST tree.
func (s *MacroCallExpr) Source() ast.Node { return s.F.Source() }

// ShortString returns a string representation of the expression calling the macro.
func (s *MacroCallExpr) ShortString() string {
	return s.X.String()
}
